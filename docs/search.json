[
  {
    "objectID": "course-materials/day1.html#class-materials",
    "href": "course-materials/day1.html#class-materials",
    "title": "Intro to programming",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 1 / morning\nCourse introduction, programming in EDS, meet our tools\nDon’t fear the Terminal - continuing with some commands, navigation, and more git\n\n\nday 1 / afternoon\nProject oriented workflows, file paths, naming things; good habits from the tidyverse style guide\nMeet {here}, project organization, adding data import to our workflow"
  },
  {
    "objectID": "course-materials/day1.html#end-of-day-practice",
    "href": "course-materials/day1.html#end-of-day-practice",
    "title": "Intro to programming",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 1 Practice: Project organization, data import, file paths"
  },
  {
    "objectID": "course-materials/day1.html#additional-resources",
    "href": "course-materials/day1.html#additional-resources",
    "title": "Intro to programming",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day2.html#class-materials",
    "href": "course-materials/day2.html#class-materials",
    "title": "Data representations",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 2 / morning\nData representations and types\nCreating and indexing with different data types in R and Python\n\n\nday 2 / afternoon\nCommon data types and structures in EDS\nData in R: accessing / updating elements & casting continued"
  },
  {
    "objectID": "course-materials/day2.html#end-of-day-practice",
    "href": "course-materials/day2.html#end-of-day-practice",
    "title": "Data representations",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 2 Practice: Exploring data types, indexing, importing, and plotting"
  },
  {
    "objectID": "course-materials/day2.html#additional-resources",
    "href": "course-materials/day2.html#additional-resources",
    "title": "Data representations",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day7.html#class-materials",
    "href": "course-materials/day7.html#class-materials",
    "title": "Data wrangling",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 7 / morning\nData wrangling continued - more tidying, relational data & types of joins\nData wrangling continued: joins\n\n\nday 7 / afternoon\nData wrangling continued - working with dates & times, wrangling strings\nData wrangling continued: dates, times, strings"
  },
  {
    "objectID": "course-materials/day7.html#end-of-day-practice",
    "href": "course-materials/day7.html#end-of-day-practice",
    "title": "Data wrangling",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 7 Practice: Wrangling continued: joins, strings, dates"
  },
  {
    "objectID": "course-materials/day7.html#additional-resources",
    "href": "course-materials/day7.html#additional-resources",
    "title": "Data wrangling",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day4.html#class-materials",
    "href": "course-materials/day4.html#class-materials",
    "title": "Introduction to functions",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 4 / morning\nIntroduction to writing functions in R & Python\nFunctions 101: basics\n\n\nday 4 / afternoon\nFunctions continued: planning, adding useful messages, more advanced functions and outputs\nFunctions 102: beyond basics"
  },
  {
    "objectID": "course-materials/day4.html#end-of-day-practice",
    "href": "course-materials/day4.html#end-of-day-practice",
    "title": "Introduction to functions",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 4 Practice: Intro to functions"
  },
  {
    "objectID": "course-materials/day4.html#additional-resources",
    "href": "course-materials/day4.html#additional-resources",
    "title": "Introduction to functions",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day8.html#class-materials",
    "href": "course-materials/day8.html#class-materials",
    "title": "Grammar of graphics",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 8 / morning\nThe grammar of graphics & basic graph considerations\nData visualization in ggplot2\n\n\nday 8 / afternoon\nData visualization basics - responsible, clear, awesome\nData viz continued"
  },
  {
    "objectID": "course-materials/day8.html#end-of-day-practice",
    "href": "course-materials/day8.html#end-of-day-practice",
    "title": "Grammar of graphics",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 8 Practice: Data visualization"
  },
  {
    "objectID": "course-materials/day8.html#additional-resources",
    "href": "course-materials/day8.html#additional-resources",
    "title": "Grammar of graphics",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nCed Scherer’s ggplot2 tutorial\nYan Holtz’ From Data to Viz\nR Graph Gallery"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Scientific Programming Essentials",
    "section": "Course Description",
    "text": "Course Description\nThis course teaches key scientific programming skills and demonstrates the application of these techniques to environmental data analysis and problem solving. Topics include structured programming and algorithm development, flow control, simple and advanced data input-output and representation, functions and objects, documentation, testing and debugging. The course will be taught using a combination of the R and Python programming languages.\nBy the end of EDS 221, students should be able to:\n\nUnderstand, create, and work with different data structures (e.g. vectors, data frames, lists) and types (e.g. numeric, character, factor, logical, date-times)\nDesign, implement, test, and document functions, including functions with iteration, conditionals, messages, and warnings in R\nUse basic (non-collaborative) project-oriented workflos with reproducible code (R scripts, Quarto documents, Jupyter notebooks) and version control (git/GitHub basics)\nPerform basic data wrangling and visualization with real world environmental data and tidyverse packages (in R)\nEmploy troubleshooting and debugging strategies including tools, mindsets, strategies, and resources"
  },
  {
    "objectID": "index.html#teaching-team",
    "href": "index.html#teaching-team",
    "title": "Scientific Programming Essentials",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\n\nInstructor\n\n\n\n\n\n\n\n\n\n\n\nRuth Oliver\nEmail: rutholiver@ucsb.edu\nLearn more: ryoliver-lab.github.io\n\n\n\n\nTA\n\n\n\n\n\n\n\n\n\n\n\nAnna Pede\nEmail: test\nLearn more: tbd"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Scientific Programming Essentials",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nEDS 221 was originally developed and taught by Allison Horst. This new website houses materials which are heavily reused, adapted from, and inspired by Allison’s original work."
  },
  {
    "objectID": "course-materials/day10.html#class-materials",
    "href": "course-materials/day10.html#class-materials",
    "title": "Collaboration tools",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 10 / morning\n\nR packages revisited, tables in R, a taste of git collaboration\n\n\nday 10 / afternoon\nCourse wrap-up"
  },
  {
    "objectID": "course-materials/day10.html#end-of-day-practice",
    "href": "course-materials/day10.html#end-of-day-practice",
    "title": "Collaboration tools",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 10 Morning Practice: GitHub collaboration\n Day 10 Afternoon Practice: Data import, exploration, & visualization"
  },
  {
    "objectID": "course-materials/day10.html#additional-resources",
    "href": "course-materials/day10.html#additional-resources",
    "title": "Collaboration tools",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day9.html#class-materials",
    "href": "course-materials/day9.html#class-materials",
    "title": "Troubleshooting",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 9 / morning\nTroubleshooting 101\nTeach Me How to Google Workshop (with Sam Csik)\n\n\nday 9 / afternoon\nkable tables & alt-text\nMore wrangling tools and practice, kable tables"
  },
  {
    "objectID": "course-materials/day9.html#end-of-day-practice",
    "href": "course-materials/day9.html#end-of-day-practice",
    "title": "Troubleshooting",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 9 Practice: Troubleshooting, reprex, & working with data continued"
  },
  {
    "objectID": "course-materials/day9.html#additional-resources",
    "href": "course-materials/day9.html#additional-resources",
    "title": "Troubleshooting",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day5.html#class-materials",
    "href": "course-materials/day5.html#class-materials",
    "title": "Testing, documentation, and sharing",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 5 / morning\nFunctions continued: testing, documentation, sharing\nFunctions 103: testing & documenting, making your first package\n\n\nday 5 / afternoon\nFinding & using external packages\nFind & explore packages, documentation, accessing from repos"
  },
  {
    "objectID": "course-materials/day5.html#end-of-day-practice",
    "href": "course-materials/day5.html#end-of-day-practice",
    "title": "Testing, documentation, and sharing",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 5 Practice: Loops revisited, functions continued, testing & sourcing scripts, working on your R package"
  },
  {
    "objectID": "course-materials/day5.html#additional-resources",
    "href": "course-materials/day5.html#additional-resources",
    "title": "Testing, documentation, and sharing",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day6.html#class-materials",
    "href": "course-materials/day6.html#class-materials",
    "title": "Tidy data",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 6 / morning\nTidy data: what, why, how?\nTidying data (pivot, separate) basics with tidyr and pandas\n\n\nday 6 / afternoon\nData tidying and wrangling continued: dplyr and pandas\nData wrangling continued - dplyr and pandas"
  },
  {
    "objectID": "course-materials/day6.html#end-of-day-practice",
    "href": "course-materials/day6.html#end-of-day-practice",
    "title": "Tidy data",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 6 Practice: Tidying & subsetting with tidyr and dplyr"
  },
  {
    "objectID": "course-materials/day6.html#additional-resources",
    "href": "course-materials/day6.html#additional-resources",
    "title": "Tidy data",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day3.html#class-materials",
    "href": "course-materials/day3.html#class-materials",
    "title": "Conditionals and logical operators",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 3 / morning\nConditionals and logical operations, intro to for loops\nRefresh logical operations, write basics for loops in R\n\n\nday 3 / afternoon\nLoops continued - and functions to help\nFor loops with conditions, apply() functions, and across()"
  },
  {
    "objectID": "course-materials/day3.html#end-of-day-practice",
    "href": "course-materials/day3.html#end-of-day-practice",
    "title": "Conditionals and logical operators",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 3 Practice: Conditionals & for loops"
  },
  {
    "objectID": "course-materials/day3.html#additional-resources",
    "href": "course-materials/day3.html#additional-resources",
    "title": "Conditionals and logical operators",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "interactive-session-1b.html",
    "href": "interactive-session-1b.html",
    "title": "Interactive Session 1B",
    "section": "",
    "text": "Fork and clone this repo\nCheck out the project structure & files"
  },
  {
    "objectID": "interactive-session-1b.html#setup",
    "href": "interactive-session-1b.html#setup",
    "title": "Interactive Session 1B",
    "section": "",
    "text": "Fork and clone this repo\nCheck out the project structure & files"
  },
  {
    "objectID": "interactive-session-1b.html#file-path-practice",
    "href": "interactive-session-1b.html#file-path-practice",
    "title": "Interactive Session 1B",
    "section": "File path practice",
    "text": "File path practice\n\nWe’ll run through each line in the toolik_airtemp_summary.qmd to understand where it’s pointing, what it’s doing, and add a few more tools to our coding toolkit (readr::read_csv(), janitor::clean_names(), %&gt;%)\nSimilarly, we’ll create from scratch & work through one more example. We will:\n\nRead in the chlorophyll data\nExplore the imported data\nClean up the dataset names\nCreate a plot of chlorophyll concentration at varying measurement depth, do some customization\nExport the graph to /figs\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# read in data\ntoolik_chlorophyll &lt;- read_csv(here::here(\"data\", \"data-raw\", \"toolik_chlorophyll.csv\"))\n\n# get data overview\nskimr::skim(toolik_chlorophyll)\n\ndim(toolik_chlorophyll)\nnames(toolik_chlorophyll)\n\n# clean names\ntoolik_chlorophyll &lt;- toolik_chlorophyll %&gt;% clean_names() \n\n# make plot\ntoolik_chlorophyll_plot &lt;- ggplot(data = toolik_chlorophyll, \n                                  aes(x = depth, y = as.numeric(active_chl_a_ug_l))) +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Toolik Station Chlorophyll a concentration\",\n       x = \"Depth (m)\",\n       y = \"Chlorophyll a concentration (micrograms per liter)\")\n\ntoolik_chlorophyll_plot\n\n# save plot\nggsave(here::here(\"figs\", \"toolik_chlorophyll_plot.png\"), height = 6, width = 7)"
  },
  {
    "objectID": "interactive-session-1b.html#data-sources",
    "href": "interactive-session-1b.html#data-sources",
    "title": "Interactive Session 1B",
    "section": "Data sources",
    "text": "Data sources\nAll datasets are collected and provided by scientists with the Toolik Station Long Term Ecological Research (LTER) site, Alaska.\nToolik Station Meteorological Data: toolik_weather.csv Shaver, G. 2019. A multi-year DAILY weather file for the Toolik Field Station at Toolik Lake, AK starting 1988 to present. ver 4. Environmental Data Initiative. https://doi.org/10.6073/pasta/ce0f300cdf87ec002909012abefd9c5c (Accessed 2021-08-08).\nToolik Lake Chlorophyll: toolik_chlorophyll.csv Miller, M. 2014. Chlorophyll A, and primary productivity of Toolik lake , Arctic LTER 1975 to 1988, Toolik Filed Station, Alaska. ver 5. Environmental Data Initiative. https://doi.org/10.6073/pasta/6738024bf0174f73b3f74486f43d1059 (Accessed 2021-08-08).\nToolik fish: toolik_fish.csv Budy, P., C. Luecke, and M. McDonald. 2020. Fish captures in lakes of the Arctic LTER region Toolik Field Station Alaska from 1986 to present. ver 6. Environmental Data Initiative. https://doi.org/10.6073/pasta/d0a9358f783339821b82510eb8c61b45 (Accessed 2021-08-08)."
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html",
    "title": "Interactive Session 2A",
    "section": "",
    "text": "Create a repo on GitHub called eds221-day2-comp\nClone to make a version-controlled R Project\nCreate a new Quarto Markdown, saved in the root as r-data-types\nCreate a new Jupyter Notebook, saved in the root as py-data-types"
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html#vectors",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html#vectors",
    "title": "Interactive Session 2A",
    "section": "Vectors!",
    "text": "Vectors!\n\nMaking vectors\n\nA character vector\n\ndogs &lt;- c(\"teddy\", \"khora\", \"waffle\", \"banjo\")\n\ntypeof(dogs)\n\n[1] \"character\"\n\nclass(dogs)\n\n[1] \"character\"\n\n\n\n\nA numeric vector\n\nweights &lt;- c(50, 55, 25, 35)\n\ntypeof(weights) # Hmmm what is different about this and the line below?\n\n[1] \"double\"\n\nclass(weights)\n\n[1] \"numeric\"\n\n\n\n\nAn integer vector\n\ndog_age &lt;- c(5L, 6L, 1L, 7L)\n\ntypeof(dog_age)\n\n[1] \"integer\"\n\nclass(dog_age)\n\n[1] \"integer\"\n\n# Check with a logical: \nis.numeric(dog_age)\n\n[1] TRUE\n\n\n\n\nWhat if we combine classes?\nThere is a hierarchy of classes. The broadest of all in a vector wins (if there are characters, then character will be the class of the entire vector).\n\ndog_info &lt;- c(\"teddy\", 50, 5L)\ndog_info\n\n[1] \"teddy\" \"50\"    \"5\"    \n\ntypeof(dog_info)\n\n[1] \"character\"\n\nclass(dog_info)\n\n[1] \"character\"\n\nis.character(dog_info)\n\n[1] TRUE\n\n\n\n\nNamed elements\n\ndog_food &lt;- c(teddy = \"purina\", khora = \"alpo\", waffle = \"fancy feast\", banjo = \"blue diamond\")\ndog_food\n\n         teddy          khora         waffle          banjo \n      \"purina\"         \"alpo\"  \"fancy feast\" \"blue diamond\" \n\nclass(dog_food)\n\n[1] \"character\"\n\ntypeof(dog_food)\n\n[1] \"character\"\n\n\n\n\n\nAccessing bits of vectors\nUse [] with the position or name to access elements of a vector.\n\ndog_food[2]\n\n khora \n\"alpo\" \n\ndog_food[\"khora\"]\n\n khora \n\"alpo\" \n\n\nOr we can specify a range of values within a vector using [:]. The first element in R vectors is assigned element = 1. This is an important distinction. In Python, the first element is assigned 0 (zero-index).\n\n# Create a vector of car colors observed\ncars &lt;- c(\"red\", \"orange\", \"white\", \"blue\", \"green\", \"silver\", \"black\")\n\n# Access just the 5th element\ncars[5]\n\n[1] \"green\"\n\n# Access elements 2 through 4\ncars[2:4]\n\n[1] \"orange\" \"white\"  \"blue\"  \n\n\n\n\nA warm-up for for loops:\n\ni &lt;- 4\ncars[i]\n\n[1] \"blue\"\n\ni &lt;- seq(1:3)\ncars[i]\n\n[1] \"red\"    \"orange\" \"white\" \n\n\n\n\nAnd we can update elements of a vector directly (mutable):\n\ncars[3] &lt;- \"BURRITOS!\"\ncars\n\n[1] \"red\"       \"orange\"    \"BURRITOS!\" \"blue\"      \"green\"     \"silver\"   \n[7] \"black\""
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html#matrices",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html#matrices",
    "title": "Interactive Session 2A",
    "section": "Matrices!",
    "text": "Matrices!\n\nCreating matrices\n(…we did some of this in EDS 212 too!)\n\nfish_size &lt;- matrix(c(0.8, 1.2, 0.4, 0.9), ncol = 2, nrow = 2, byrow = FALSE)\n\nfish_size\n\n     [,1] [,2]\n[1,]  0.8  0.4\n[2,]  1.2  0.9\n\ntypeof(fish_size) # Returns the class of values\n\n[1] \"double\"\n\nclass(fish_size) # Returns matrix / array\n\n[1] \"matrix\" \"array\" \n\n\nWhat happens if we try to combine multiple data types into a matrix?\n\ndog_walk &lt;- matrix(c(\"teddy\", 5, \"khora\", 10), ncol = 2, nrow = 2, byrow = FALSE)\n\ndog_walk\n\n     [,1]    [,2]   \n[1,] \"teddy\" \"khora\"\n[2,] \"5\"     \"10\"   \n\nclass(dog_walk)\n\n[1] \"matrix\" \"array\" \n\ntypeof(dog_walk)\n\n[1] \"character\"\n\n# Hmmmmmm once again back to the broadest category of data type in the hierarchy\n\n\n\nAccessing pieces of matrices\nIndex using [row, column].\n\nwhale_travel &lt;- matrix(data = c(31.8, 1348, 46.9, 1587), nrow = 2, ncol = 2, byrow = TRUE)\n\n# Take a look\nwhale_travel\n\n     [,1] [,2]\n[1,] 31.8 1348\n[2,] 46.9 1587\n\n# Access the value 1348\nwhale_travel[1,2] # Row 1, column 2\n\n[1] 1348\n\n# Access the value 46.9\nwhale_travel[2,1]\n\n[1] 46.9\n\n\nIf you leave any element blank (keeping the comma), it will return all values from the other element. For example, to get everything in row 2:\n\nwhale_travel[2,]\n\n[1]   46.9 1587.0\n\n\nOr, to access everything in column 1:\n\nwhale_travel[, 1]\n\n[1] 31.8 46.9\n\n\nWhat happens if I only give a matrix one element? That’s the position in the matrix as if populated by column. Check out a few:\n\nwhale_travel[3]\n\n[1] 1348"
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html#lists",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html#lists",
    "title": "Interactive Session 2A",
    "section": "Lists",
    "text": "Lists\n\nurchins &lt;- list(\"blue\", c(1, 2, 3), c(\"a cat\", \"a dog\"), 5L)\n\nurchins\n\n[[1]]\n[1] \"blue\"\n\n[[2]]\n[1] 1 2 3\n\n[[3]]\n[1] \"a cat\" \"a dog\"\n\n[[4]]\n[1] 5\n\n\n\nAccessing pieces of a list\nImportant: a single [] returns a list. [[]] returns the item STORED in the list.\n\nurchins[[2]]\n\n[1] 1 2 3\n\n# Compare that to: \nurchins[2]\n\n[[1]]\n[1] 1 2 3\n\n\n\n\nNaming list items? Sure thing!\n\ntacos &lt;- list(topping = c(\"onion\", \"cilantro\", \"guacamole\"), filling = c(\"beans\", \"meat\", \"veggie\"), price = c(6.75, 8.25, 9.50))\n\n# The whole thing\ntacos\n\n$topping\n[1] \"onion\"     \"cilantro\"  \"guacamole\"\n\n$filling\n[1] \"beans\"  \"meat\"   \"veggie\"\n\n$price\n[1] 6.75 8.25 9.50\n\n# Just get one piece of it: \ntacos[[2]]\n\n[1] \"beans\"  \"meat\"   \"veggie\"\n\n#...or, the same thing:\ntacos$filling\n\n[1] \"beans\"  \"meat\"   \"veggie\""
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html#data-frames",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html#data-frames",
    "title": "Interactive Session 2A",
    "section": "Data frames",
    "text": "Data frames\nA data frame is a list containing vectors of the same length, where each column is a variable stored in a vector. Let’s make one:\n\nfruit &lt;- data.frame(type = c(\"apple\", \"banana\", \"peach\"), \n                    mass = c(130, 195, 150))\n\n# Look at it\nfruit\n\n    type mass\n1  apple  130\n2 banana  195\n3  peach  150\n\n# Check the class\nclass(fruit)\n\n[1] \"data.frame\"\n\n\n\nAccess elements from a data frame\nUse [row#, col#], or name the column (then element number).\n\nfruit[1,2]\n\n[1] 130\n\nfruit[3,1]\n\n[1] \"peach\"\n\n\n\nfruit[2,1] &lt;- \"pineapple\"\nfruit\n\n       type mass\n1     apple  130\n2 pineapple  195\n3     peach  150"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day2.html",
    "href": "course-materials/eod-practice/eod-day2.html",
    "title": "Day 2 Activities",
    "section": "",
    "text": "Create a new repo on GitHub for today’s activities\nClone to create a version controlled R Project\nCreate subfolders called docs, data, and figs\nCreate a Quarto document, save in the docs subfolder as r_data_types.qmd\n\n\n\n\n\n\nIn your Quarto document:\n\nCreate a vector called vec_1containing the following:\n\n\n2, 5, 9, 10, 8, 12, 1, 0\n\nCheck the following for that vector:\n\nWhat is the class of the vector? class()\nWhat type of variable does it store? typeof()\nAccess the 3rd element and store as vec_1_e3\nAccess the 1st element and store as vec_1_e1\nAccess the 5th through 7th elements and store as vec_1_e5to7\nReassign vec_1 as a character using as.character, stored as vec_1_char. What does the output look like?\n\n\nCreate a vector called vec_2\n\nvec_2 should contained named elements, where town = \"Santa Barbara, location = \"Rincon\", swell = \"south\"\n\nTake a look at what you’ve made\nWhat is the class of vector elements? class()\nWhat is the length of vec_2?\nAccess the 2nd element by name and store as vec_2_e2\n\n\nCreate a data frame in R, index\n\nWrite code to create a data frame called df_1 that looks like this:\n\n\n  region     species count\n1      A       otter    12\n2      B great white     2\n3      A    sea lion    36\n4      D  gray whale     6\n\n\n\nReturn the class of the entire data frame\nReturn the class of the species column\nFind the maximum value of the count() column, store as max_count"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day2.html#part-1.-checking-data-types",
    "href": "course-materials/eod-practice/eod-day2.html#part-1.-checking-data-types",
    "title": "Day 2 Activities",
    "section": "",
    "text": "Create a new repo on GitHub for today’s activities\nClone to create a version controlled R Project\nCreate subfolders called docs, data, and figs\nCreate a Quarto document, save in the docs subfolder as r_data_types.qmd\n\n\n\n\n\n\nIn your Quarto document:\n\nCreate a vector called vec_1containing the following:\n\n\n2, 5, 9, 10, 8, 12, 1, 0\n\nCheck the following for that vector:\n\nWhat is the class of the vector? class()\nWhat type of variable does it store? typeof()\nAccess the 3rd element and store as vec_1_e3\nAccess the 1st element and store as vec_1_e1\nAccess the 5th through 7th elements and store as vec_1_e5to7\nReassign vec_1 as a character using as.character, stored as vec_1_char. What does the output look like?\n\n\nCreate a vector called vec_2\n\nvec_2 should contained named elements, where town = \"Santa Barbara, location = \"Rincon\", swell = \"south\"\n\nTake a look at what you’ve made\nWhat is the class of vector elements? class()\nWhat is the length of vec_2?\nAccess the 2nd element by name and store as vec_2_e2\n\n\nCreate a data frame in R, index\n\nWrite code to create a data frame called df_1 that looks like this:\n\n\n  region     species count\n1      A       otter    12\n2      B great white     2\n3      A    sea lion    36\n4      D  gray whale     6\n\n\n\nReturn the class of the entire data frame\nReturn the class of the species column\nFind the maximum value of the count() column, store as max_count"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day2.html#part-2.-wild-data",
    "href": "course-materials/eod-practice/eod-day2.html#part-2.-wild-data",
    "title": "Day 2 Activities",
    "section": "Part 2. Wild data",
    "text": "Part 2. Wild data\n\nSet-up\n\nVisit the EDI site to learn about Mack Creek salamander & cutthroat trout data you’ll be using here: data package\nDownload the first CSV listed (AS00601.csv), and take a look at it (outside of R is fine as a first step, e.g. you can open the CSV in Excel)\nExplore the metadata (see View Full Metadata in the Resources section of the data website)\nWhat does each column contain? What are the units of each? What is the study overall about?\nCreate a new Quarto document and save it in your docs folder. Attach the tidyverse, here and janitor packages in the setup chunk (you choose the file name)\nSet global options in the YAML so that messages and warnings do NOT show up in the rendered document\nSave the AS00601.csv in your data folder of your project\n\n\n\nRead in the data\n\nRead in the data using read_csv() with here(), store as mack_verts\nLook at what you’ve read in (e.g. with view())\n\n\n\nA bit of wrangling & exploring\n\nUpdate the variable names in mack_verts to lower snake case\nIn a new code chunk, practice accessing individual pieces of the data frame (there is no real functionality to this right now, but just to reinforce stuff we learned in our interactive session):\n\nStore the 5th value in column “WEIGHT” as mc_wt_5. Check by looking at your data frame to confirm.\nStore the 8th - 20th value in the “LENGTH1” column as mc_length_8_20. Check by looking at your data frame to confirm.\nStore everything in column SAMPLEDATE as a vector called mc_dates\n\n\n\n\nMake a salamander subset\n\nCreate a subset that only contains observations for Pacific Giant Salamanders (species Dicamptodon tenebrosus, stored in species as DITE). Store the subset as mc_salamanders. Hint: see dplyr::filter()!\n\n\n\nMake a scatterplot of salamander length x weight\n\nCreate a scatterplot of length1 (snout-vent length in millimeters) versus weight (grams) for all salamanders in the subset you created above, mc_salamanders. Update axis labels, title, subtitle, and add a caption with the data source. Customize point color and size, possibly opacity, and theme.\nExport your scatterplot as salamander_size.png to your figs folder.\n\n\n\nMake a cutthroat plot\n\nSimilar to above, make a subset called mc_trout that only contains observations for cutthroat trout (species “ONCL”)\nCreate a scatterplot of length1 by weight for all trout in the dataset\nCustomize so that the point color depends on reach\nCustomize your color scheme (e.g. scale_color_manual())\nFacet your plot by creek reach (hint: facet_wrap(~...))\nUpdate graph axis labels and title\nExport your graph as cutthroat_size.png to the figs folder\n\n\n\nStage, commit, pull, push\n\nMake sure your changes are safely stored by pushing to GitHub\nClose your project locally\nReopen your project locally\nReopen your .qmd files for the activities you did today.\nRender. Does it work? Done."
  },
  {
    "objectID": "course-materials/eod-practice/eod-day2.html#end-day-2-activities",
    "href": "course-materials/eod-practice/eod-day2.html#end-day-2-activities",
    "title": "Day 2 Activities",
    "section": "End Day 2 activities",
    "text": "End Day 2 activities"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html",
    "href": "course-materials/eod-practice/eod-day3.html",
    "title": "Day 3 Activities",
    "section": "",
    "text": "Create a repo on GitHub named eds212-day3-activities\nClone to create a version-controlled R Project\nCreate some subfolder infrastructure (docs, data)"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html#part-0.-setup",
    "href": "course-materials/eod-practice/eod-day3.html#part-0.-setup",
    "title": "Day 3 Activities",
    "section": "",
    "text": "Create a repo on GitHub named eds212-day3-activities\nClone to create a version-controlled R Project\nCreate some subfolder infrastructure (docs, data)"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html#part-1.-conditional-statements-for-loops",
    "href": "course-materials/eod-practice/eod-day3.html#part-1.-conditional-statements-for-loops",
    "title": "Day 3 Activities",
    "section": "Part 1. Conditional statements & for loops",
    "text": "Part 1. Conditional statements & for loops\nCreate a new Quarto document in your docs folder, saved as conditionals_loops.qmd. Complete all tasks for Part 1 in this .qmd.\nComplete each of the following in a separate code chunk.\n\nConditional statements\n\nTask 1\nCreate an object called pm2_5 with a value of 48 (representing Particulate Matter 2.5, an indicator for air quality, in \\(\\frac{\\mu g}{m^3}\\) (see more about PM2.5 here).\nWrite an if - else if - else statement that returns “Low to moderate risk” if pm2_5 (for Particulate Matter 2.5) is less than 100, “Unhealthy for sensitive groups” if PM 2.5 is 100 &lt;= pm2_5 &lt; 150, and “Health risk present” if PM 2.5 is &gt;= 150.\nTest by changing the value of your pm2_5 object and re-running your statement to check.\n\n\nTask 2\nStore the string “blue whale” as an object called species. Write an if statement that returns “You found a whale!” if the string “whale” is detected in species, otherwise return nothing. Test by changing the species string & re-running to see output.\n\n\n\nTask 3\nStore the base price of a burrito as base_burrito with a value of 6.50. Store main_ingredient with a starting string of “veggie.” Write a statement that will return the price of a burrito based on what a user specifies as “main_ingredient” (either “veggie”, “chicken” or “steak”) given the following:\n\nA veggie burrito is the cost of a base burrito\nA chicken burrito costs 3.00 more than a base burrito\nA steak burrito costs 3.25 more than a base burrito\n\n\n\n\nFor loops\nComplete each of the following in a separate code chunk.\n\nTask 4\nCreate a new vector called fish that contains the values 8, 10, 12, 23 representing counts of different fish types in a fish tank (goldfish, tetras, guppies, and mollies, respectively). Write a for loop that iterates through fish, and returns what proportion of total fish in the tank are that species. Assume that these counts represent all fish in the tank.\n\n\nTask 5\nThere is an existing vector in R called month.name that contains all month names (just ry running month.name in the Console to check it out). Write a for loop that iterates over all months in month.name and prints “January is month 1,” “February is month 2”, etc.\nHint: you can index values in the month.name vector just like you would any other vector (e.g., try running month.name[5])."
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html#part-2.-real-data",
    "href": "course-materials/eod-practice/eod-day3.html#part-2.-real-data",
    "title": "Day 3 Activities",
    "section": "Part 2. Real data",
    "text": "Part 2. Real data\nYou will complete Part 3 in a separate .qmd.\nExplore this data package from EDI, which contains a “Data file describing the biogeochemistry of samples collected at various sites near Toolik Lake, North Slope of Alaska”. Familiarize yourself with the metadata (particularly, View full metadata &gt; expand ‘Data entities’ to learn more about the variables in the dataset).\nCitation: Kling, G. 2016. Biogeochemistry data set for soil waters, streams, and lakes near Toolik on the North Slope of Alaska, 2011. ver 5. Environmental Data Initiative. https://doi.org/10.6073/pasta/362c8eeac5cad9a45288cf1b0d617ba7\n\nDownload the CSV containing the Toolik biogeochemistry data\nTake a look at it - how are missing values stored? Keep that in mind.\nDrop the CSV into your data folder of your project\nCreate a new Quarto document, save in docs as toolik_chem.qmd\nAttach the tidyverse, here, and janitor packages in your setup code chunk\nRead in the data as toolik_biochem. Remember, you’ll want to specify here how NA values are stored. Pipe directly into janitor::clean_names() following your import code to get all column names into lower snake case.\nCreate a subset of the data that contains only observations from the “Toolik Inlet” site, and that only contains the variables (columns) for pH, dissolved organic carbon (DOC), and total dissolved nitrogen (TDN) (hint: see dplyr::select()). Store this subset as inlet_biochem. Make sure to look at the subset you’ve created.\nFind the mean value of each column in inlet_biochem 3 different ways:\n\n\nWrite a for loop from scratch to calculate the mean for each\nUse one other method (e.g. apply, across, or purrr::map_df) to find the mean for each column.\n\n\nSave, stage, commit, pull, push!"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html#end-day-3-activities",
    "href": "course-materials/eod-practice/eod-day3.html#end-day-3-activities",
    "title": "Day 3 Activities",
    "section": "END Day 3 activities",
    "text": "END Day 3 activities"
  },
  {
    "objectID": "eod-day4.html",
    "href": "eod-day4.html",
    "title": "Day 4 Activities",
    "section": "",
    "text": "Create a repo on GitHub named eds221-day4-activities\nClone to create a version-controlled R Project\nCreate some subfolder infrastructure (docs, data)\nAdd a new Quarto file, save as loops_and_functions.qmd in docs"
  },
  {
    "objectID": "eod-day4.html#part-0.-setup",
    "href": "eod-day4.html#part-0.-setup",
    "title": "Day 4 Activities",
    "section": "",
    "text": "Create a repo on GitHub named eds221-day4-activities\nClone to create a version-controlled R Project\nCreate some subfolder infrastructure (docs, data)\nAdd a new Quarto file, save as loops_and_functions.qmd in docs"
  },
  {
    "objectID": "eod-day4.html#part-1.-for-loops-revisited",
    "href": "eod-day4.html#part-1.-for-loops-revisited",
    "title": "Day 4 Activities",
    "section": "Part 1. For loops revisited",
    "text": "Part 1. For loops revisited\n\nTask 1\nCreate two sequences, one called weekdays that contains days of the week (“Monday”, “Tuesday”, “Wednesday”, etc.) and one called transects that contains the series of transect names “Transect A”, “Transect B,”Transect C”. Write a nested for loop that creates a matrix containing the following:\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonday - Transect A\nMonday - Transect B\nMonday - Transect C\n\n\nTuesday - Transect A\nTuesday - Transect B\nTuesday - Transect C\n\n\nWednesday - Transect A\nWednesday - Transect B\nWednesday - Transect C\n\n\nThursday - Transect A\nThursday - Transect B\nThursday - Transect C\n\n\nFriday - Transect A\nFriday - Transect B\nFriday - Transect C\n\n\nSaturday - Transect A\nSaturday - Transect B\nSaturday - Transect C\n\n\nSunday - Transect A\nSunday - Transect B\nSunday - Transect C"
  },
  {
    "objectID": "eod-day4.html#part-2.-functions-introduced",
    "href": "eod-day4.html#part-2.-functions-introduced",
    "title": "Day 4 Activities",
    "section": "Part 2. Functions introduced",
    "text": "Part 2. Functions introduced\n\nTask 2\nWrite a function called force that calculates a force (in Newtons), given inputs of mass (in kg) and acceleration (in \\(\\frac{m}{s^2}\\) (recall: \\(F = ma\\)), and returns a statement “The resulting force is ___ Newtons.”\n\n\n\nTask 3\nThe length:weight relationship for fish is: \\(W=aL^b\\), where where L is total fish length (centimeters), W is the expected fish weight (grams), and a and b are species-dependent parameter values (shown below for several fish from Peyton et al. 2016).\n\n\n\n\n\n\nsci_name\ncommon_name\na_est\nb_est\n\n\n\n\nChanos chanos\nMilkfish\n0.0905\n2.52\n\n\nSphyraena barracuda\nGreat barracuda\n0.0181\n3.27\n\n\nCaranx ignobilis\nGiant trevally\n0.0353\n3.05\n\n\n\n\n\n\n\n\nRecreate the table above as a data frame stored as fish_parms. Then, write a function called fish_weight that allows a user to only enter the common name (argument fish_name) and total length (argument tot_length) (in centimeters) of a fish, to return the expected fish weight in grams. Test it out for different species and lengths.\nNow, try creating a vector of lengths (e.g. 0 to 100, by increments of 1) and ensuring that your function will calculate the fish weight over a range of lengths for the given species (try this for milkfish, storing the output weights as milkfish_weights.\n\n\nTask 4\nWave power (more accurately wave energy flux) in deep water is approximated by:\n\\[P_{deep}=0.5 H^2 T\\] where \\(P\\) is power in \\(\\frac{kW}{m}\\) (potential power per wave meter), \\(H\\) is wave height in meters (more specifically, the significant wave height), and \\(T\\) is the wave period in seconds. Learn more here.\nWrite a function called wave_power that calculates potential ocean wave power given inputs of wave height and period.\nUse your wave_power function to approximate wave power for a period of 8 seconds, over a range of wave heights from 0 to 3 meters by increments of 0.2 meters.\n\n\nTask 5 (OPTIONAL)\nThe wave energy equation changes based on ocean depth. Along the coast of Brenville, which has a very sharp shelf as the wave approaches the coast, wave energy is approximated using the deep ocean equation (the one you used above) for depths &gt; 12 meters, and a shallow equation for depths &lt;= 12 meters. The Brenville team estimates shallow wave power by:\n\\[P_{shallow}=0.81 H^2 T\\]\nCreate a function that requires inputs of water depth, wave height and period, then returns the approximated wave power using the correct equation for the depth entered. It should also include a message (hint: use message() just like you would use warning!) that lets the user know if the shallow or deep water equation was used.\n\n\n\nCitations\nPeyton, K. A., T. S. Sakihara, L. K. Nishiura, T. T. Shindo, T. E. Shimoda, S. Hau, A. Akiona, and K. Lorance. 2016. “Length–Weight Relationships for Common Juvenile Fishes and Prey Species in Hawaiian Estuaries.” Journal of Applied Ichthyology 32 (3): 499–502. https://doi.org/10.1111/jai.12957."
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-5.html",
    "href": "course-materials/interactive-sessions/interactive-session-5.html",
    "title": "Day 5 Interactive Session Materials",
    "section": "",
    "text": "Fork then clone this repo to create a version-controlled R Project for Day 5"
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-5.html#setup",
    "href": "course-materials/interactive-sessions/interactive-session-5.html#setup",
    "title": "Day 5 Interactive Session Materials",
    "section": "",
    "text": "Fork then clone this repo to create a version-controlled R Project for Day 5"
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-5.html#part-0-warm-up---for-loops-revisited-leslie-matrix",
    "href": "course-materials/interactive-sessions/interactive-session-5.html#part-0-warm-up---for-loops-revisited-leslie-matrix",
    "title": "Day 5 Interactive Session Materials",
    "section": "Part 0: Warm up - For loops revisited (Leslie Matrix)",
    "text": "Part 0: Warm up - For loops revisited (Leslie Matrix)\nOpen the leslie_projection.Rmd file in docs/. All code shown below for Part 0 is in that file. You should be able to run it out-of-the-box. In EDS 212, we learned about Leslie matrices for projecting populations based on mortality and reproduction for different organism life stages. Let’s return to one example we checked out.\nA population of fish we’re interested in has four life stages: eggs (E), fry (F), juvenile (J), breeding adult (A). You are told that annually:\n\nEach breeding adult will produce, on average, 200 eggs\n5% of eggs will survive to become fry\n10% of fry will survive to become juveniles\n16% of juveniles will survive to become adults\nAdult survival rate year to year is 90%\n\n\nCreate the matrix\n\n# Make the Leslie Matrix:\nfish_leslie &lt;- matrix(c(0, 0, 0, 200, 0.05, 0, 0, 0, 0, 0.10, 0, 0, 0, 0, 0.16, 0.9), nrow = 4, ncol = 4, byrow = TRUE)\n\n# Check it out: \nfish_leslie\n\n     [,1] [,2] [,3]  [,4]\n[1,] 0.00  0.0 0.00 200.0\n[2,] 0.05  0.0 0.00   0.0\n[3,] 0.00  0.1 0.00   0.0\n[4,] 0.00  0.0 0.16   0.9\n\n\nRecall, we are able to use the dot product (%*%) to estimate the population at the next year (we’ll draw this on the board to remember what it looks like).\nThe initial population structure is given by:\n\n# Initial population structure (Roe, Fry, Juvenile, Adult): \nfish_year0 &lt;- c(5000, 8000, 600, 400)\n\n\n# ------ WHAT HAPPENS HERE? ------ #\ntime_yr &lt;- seq(from = 0, to = 8, by = 1)\nproj_year &lt;- matrix(ncol = length(fish_year0), nrow = length(time_yr))\nproj_year[1, ] &lt;- fish_year0\n\n\nfor (i in 2:length(time_yr)) {\n  proj_year[i,] &lt;- fish_leslie %*% proj_year[i-1,]\n}\n# -------------------------------- #\n\n# The rest is wrangling & visualization:\ncolnames(proj_year) &lt;- c(\"eggs\", \"fry\", \"juvenile\", \"adult\")\nproj_df &lt;- data.frame(time_yr, proj_year) %&gt;% \n  pivot_longer(cols = -time_yr, names_to = \"lifestage\", values_to = \"stage_population\")\n\nggplot(data = proj_df, aes(x = time_yr, y = stage_population)) +\n  geom_line(aes(color = lifestage)) +\n  scale_y_log10()"
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-5.html#part-1-testing-functions-with-testthat",
    "href": "course-materials/interactive-sessions/interactive-session-5.html#part-1-testing-functions-with-testthat",
    "title": "Day 5 Interactive Session Materials",
    "section": "Part 1: Testing functions with {testthat}",
    "text": "Part 1: Testing functions with {testthat}\n\nCreate a new R Markdown file in your existing project (in docs/) saved as fun_testing.Rmd\nInstall the testthat package (install.packages(\"testthat\"))\nInstall the devtools package (install.packages(\"devtools\"))\nInstall the remotes packages (install.packages(\"remotes\"))\n\nAs we develop algorithms, we’ll change our code. We want a way to automatically check our work to make sure it’s behaving as expected. The testthat package “tries to make testing as fun as possible.”\nUnit test: A unit test is an automated check of a piece (“unit”) of your code\nLet’s consider an example. We’re writing a function to find the mean value of each column, then return the lowest and highest mean calculated (in that order). We would expect:\n\nThe outcome to be a numeric vector of length 2\nWhere the first value in the vector is smaller than the second value in that vector\n\n\nWrite the function\nLet’s write the function first, then create some accompanying tests to make sure they’re working.\n\nmean_range &lt;- function(df) {\n  col_means &lt;- apply(X = df, MARGIN = 2, FUN = mean, na.rm = TRUE) # Returns column means as a vector\n  col_mean_max &lt;- max(col_means) # Looks for the maximum value in the vector\n  col_mean_min &lt;- min(col_means) # Looks for the minimum value in the vector\n  return(c(col_mean_min, col_mean_max)) # Prints the vector with minimum & maximum\n}\n\n# Try it out:\nmean_range(df = mtcars)\n\n[1]   0.40625 230.72188\n\n\nOK great. But we’re doing some work on this code, and we don’t want to have to try a bunch of different things manually each time we change it to see how it breaks. Instead, let’s write some automated tests for this function that help us avoid that.\n\n\nCreate some tests with testthat\nThe testthat package contains a whole bunch of helper functions built for testing. Take a look at options in the package documentation.\nHere are some examples of the types of built-in functions for testing:\n\nexpect_length(): does the function return a vector of the expected length?\nexpect_equal(): does the function return an expected value?\nexpect_true(): does the code return TRUE or FALSE?\n\nFor example, let’s use expect_length() to test our function above, which should return a vector of length 2.\n\nexpect_length(mean_range(mtcars), 2)\n\nNothing is returned - that’s passing. You’ll get an error message if the test fails. What if we say the expected length of the vector returned is 3?\n\nexpect_length(mean_range(mtcars), 3)\n\nError: mean_range(mtcars) has length 2, not length 3.\n\n\nLet’s do another one!\nFor this function to be working correctly, the output of mean_range(mtcars) should have two values and we expect the first element to be smaller than the second element.\nOur test might look something like:\n\nexpect_true(mean_range(mtcars)[1] &lt; mean_range(mtcars)[2])\n\nThat passes! What happens if you change the alligator mouth direction?\n\nexpect_true(mean_range(mtcars)[1] &gt; mean_range(mtcars)[2])\n\nError: mean_range(mtcars)[1] &gt; mean_range(mtcars)[2] is not TRUE\n\n`actual`:   FALSE\n`expected`: TRUE \n\n\nThat test fails. This is just a little flavor of what unit tests do."
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-5.html#part-2-sourcing-functions",
    "href": "course-materials/interactive-sessions/interactive-session-5.html#part-2-sourcing-functions",
    "title": "Day 5 Interactive Session Materials",
    "section": "Part 2: Sourcing functions",
    "text": "Part 2: Sourcing functions\nWhen you’re writing functions (or working with someone else’s functions), often they’re not stored in the actual script or notebook you’re working in. If that’s the case, you can still use them by sourcing a function.\nLet’s make a function that’s stored in a script, save it in our project working directory, and use it in an R Markdown document.\n\nCreate a new R script (File &gt; New File &gt; R Script)\nSave the script in your project\n\nIn our new R script, let’s write a function that, when given inputs of the user’s favorite food and animal, returns the name of their future food cart.\n\nname_cart &lt;- function(food, animal) {\n  print(paste(\"Mc\", stringr::str_to_title(animal), \"'s \", stringr::str_to_title(food), \"Mart\", sep = \"\"))\n}\n\n# Try it out: \nname_cart(food = \"burrito\", animal = \"pika\")\n\nSave the script with a descriptive name, e.g. food_cart_functions.R (this could, in theory, contain multiple functions). Atop our .Rmd (in the setup chunk), we’ll source the script so we have access to its functions. Mine will look like this:\nsource(\"food_cart_functions.R\")\nNote: you may have your scripts in a subfolder (e.g. R/ or something) - you can use here::here() within the source() function to point to the right place within your R Project as needed.\nNow, add a code chunk in your R Markdown document that uses the name_cart() function you’ve created. It works over here, too!\n\nname_cart(food = \"strawberry\", animal = \"marmot\")\n\n[1] \"McMarmot's StrawberryMart\"\n\n\nThis gives us a valuable tool for organizing things within a project. Often, you’ll have a separate folder called R where you have your scripts / functions, and those are sourced as needed for use in your notebook or by another script you’re working on.\n\nA real sourcing example: cork oak growth\nCitation: Mariola Sánchez-González, Margarida Tomé, Gregorio Montero. Modelling height and diameter growth of dominant cork oak trees in Spain. Annals of Forest Science, Springer Nature (since 2011)/EDP Science (until 2010), 2005, 62 (7), pp.633-643.\nIn the src/ folder there is a script cork_oak_growth.R that contains one function height_t2 that estimates the height of a cork oak tree at some age (time 2), given a prior height of the tree, the age when that height was recorded (years), and the age you’re trying to estimate the new height for (these ages are t1 and t2, respectively, in the model).\nCreate a new .Rmd. Source the script by running source(here::here(\"path\", \"to\", \"script.R\")) in your setup chunk. Ensure that you can use the function in your .Rmd whenever you want to."
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-5.html#part-3-function-documentation",
    "href": "course-materials/interactive-sessions/interactive-session-5.html#part-3-function-documentation",
    "title": "Day 5 Interactive Session Materials",
    "section": "Part 3: Function documentation",
    "text": "Part 3: Function documentation\nDocumentation is a really important part of data science. Remember: “past you doesn’t respond to emails” (Wickham). I’ll also add that present you will forget things immediately, and future you is a grump. So make sure, for your sake and the sake of your collaborators, you document your functions (along with any useful annotation throughout your work) to make them easier for you to use later on.\nIt’s important to note here that documentation can mean different things.\nInformally, this can mean adding relevant comments to your script so that you know:\n\nArguments expected (name and units)\nVariable types expected (and output)\nA summary of what the function does\nAn example of how it works\nAny citations / relevant information\n\nFormally, in R, the {roxygen2} package can help guide our documentation.\nLet’s try creating some documentation for a little function. Write a function to calculate the maximum sustained harvest (\\(H\\)), given a fishery carrying capacity (\\(K\\)) and intrinsic growth rate, \\(r\\):\n\\[H = \\frac{Kr}{4}\\]\n\n# Write the functio\nmax_sustainable_harvest &lt;- function (K, r) {\n  harvest &lt;- (K * r) / 4\n  return(harvest)\n}\n\n# Try it out: \nmax_sustainable_harvest(K = 36000, r = 0.31)\n\n[1] 2790\n\n\nNow, how can we document this function?\nWe’ll use what’s called a Roxygen Skeleton - a skeleton set of documentation that prompts us to input important information about our function. Note: this exercise is just so you get a feel for what a roxygen skeleton looks like.\nTo add a Roxygen Skeleton:\n\nClick anywhere within your function\nIn RStudio, go up to ‘Code’ in the top menu, and click ‘Insert Roxygen Skeleton’\nImmediately above your function, you should see some auto-added text that looks like this (your parameters will already be added):\n\n\n#' Title\n#'\n#' @param  \n#' @param  \n#'\n#' @return\n#' @export\n#'\n#' @examples\n\n\nUpdate the fields with descriptions and types\n\n@param: information about the parameters (arguments) in your function\n@return: information about what the function returns to the user\n@export: we’ll return to this, but this lets an R package know that this is a function available for the user to use (not an internal function)\n@examples: add helpful examples for the user\n\n\n\n#' Maximum sustainable harvest\n#' \n#' A little function to return the maximum sustainable harvest given the carrying capacity and growth rate.\n#'\n#' @param K A number indicating the carrying capacity of the fishery (in individuals)  \n#' @param r A number indicating the intrinsic growth rate of the fishery (in 1 / yr)\n#'\n#' @return A number indicating the maximum annual sustainable harvest for the fishery\n#' @export\n#'\n#' @examples\n#' max_sustainable_yield(K = 3.8e5, r = 0.62)\n\nSo overall, our function code chunk might look like this:\n\n#' Maximum sustainable harvest\n#' \n#' A little function to return the maximum sustainable harvest given the carrying capacity and growth rate.\n#'\n#' @param K A number indicating the carrying capacity of the fishery (in individuals)  \n#' @param r A number indicating the intrinsic growth rate of the fishery (in 1 / yr)\n#'\n#' @return A number indicating the calculated maximum annual sustainable harvest for the fishery\n#' @export\n#'\n#' @examples\n#' max_sustainable_harvest(K = 3.8e5, r = 0.62)\n\nmax_sustainable_harvest &lt;- function (K, r) {\n  harvest &lt;- (K * r) / 4\n  return(harvest)\n}\n\n# Try it out: \nmax_sustainable_harvest(K = 36000, r = 0.31)\n\n[1] 2790\n\n\nNow, this might seem weird because it’s not obvious how that odd formatting of the Roxygen Skeleton actually helps. Why not just make them normal comments, and it words that a human can easily read?\nThe answer is: because this structure and syntax will make it possible for us to store our documentation as part of an R package containing our function. And that’s what we want to do next…"
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-5.html#part-4-making-an-r-package",
    "href": "course-materials/interactive-sessions/interactive-session-5.html#part-4-making-an-r-package",
    "title": "Day 5 Interactive Session Materials",
    "section": "Part 4: Making an R package",
    "text": "Part 4: Making an R package\nLet’s put a bunch of what we’ve been working on together into an R package that you can use, and share with others so they can use your amazing function!\nStep-by-step:\n\nIn RStudio, new R Project &gt; New directory &gt; R package\nName your R package something awesome, like your favorite food and favorite animal (e.g. tacopika)\nSave your new package project in your EDS 221 folder, and open your project in a new session\nHey, you made an R package!\n\nSome placeholder example stuff exists in it already\nIncluding a single function called hello() that prints the worlds “Hello, world!”\nThe function is saved in a single .R script, with the same name, within the R folder\n\nWait you made an R package? Yup try it out.\n\nGo up to the Build tab, and click ‘Install and restart’\nYou should see that your package is attached (see library(your_package_name) in the Console)\nNow you can use any of the exported functions - which so far is only hello(). Try it!\n\nOK but let’s really make it your own…\n\n\nCreate a new R script in your project\nCreate a function within the script of your choosing (you’ll share this with a classmate). Some requirements:\n\nIt must have at least 3 parameters\nOf those 3 parameters, at least one must be a character, and one numeric\n\nSave the script in the R subfolder with the same name as your function. For example, if your function is called jurassic_park(), then the script should be saved in the R folder as jurassic_park.R.\nClick ‘Install and restart’ in the Build tab again\nTry your new function!\n\n\nDocumenting your function\n\nSo that’s cool that your new function exists within the package and you can use it. But now try checking the documentation on your function using ?function_name. What shows up? Zilch, right?\nWe want to add documentation for our function that we can check it out whenever we use the function, and so that other users will have critical information about what it does and how it works.\n\nIn the script with your function, click anywhere within your function\nAdd a roxygen skeleton (Code &gt; Insert Roxygen Skeleton)\nUpdate your documentation with at least a new title and parameter descriptions. Save.\nRun devtools::document() (note: if you see ‘Warning: Namespace not generated by Roxygen2’, you should delete the existing NAMESPACE file, then run devtools::document() again to resolve)\nSomething new is created - check the man/ folder and see that an .Rd (R documentation) file has been added that is associated with your function name, and that contains your updated documentation\nPress Install and restart in the Build tab\nCheck for your function documentation - does it exist now? Cool!\n\nThings to remember:\n\nRun devtools::document() any time you update your function or documentation\nYou must use Install and restart to see the changes when you test\n\n\nSharing your package\n\nPutting it on GitHub\nYour friends and family will definitely want to use the amazing R package you’ve just created. How can they install and use it?\nCollaborators can install your package straight from a GitHub repo. Let’s put it up there.\n\nIn your package project, run usethis::use_git()\nThen run usethis::use_github()\n\nThis should take you to your new GitHub repo for the package.\nInstalling a package from GitHub\nOnce your package is in a public repo on GitHub, anyone can install its contents by running:\n`remotes::install_github(\"username/reponame\")`\nFor example, if my package is in a repo called tacopika, then someone could install that package of mine using:\n`remotes::install_github(\"allisonhorst/tacopika\")`\nNote: you can check all functions in a package by running lsf.str(\"package:packagename\") in the console. For example, after installing the package tacopika above, running lsf.str(\"package:tacopika\") in the Console will return all functions in it."
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-5.html#part-5.-finding-vetting-and-using-other-packages",
    "href": "course-materials/interactive-sessions/interactive-session-5.html#part-5.-finding-vetting-and-using-other-packages",
    "title": "Day 5 Interactive Session Materials",
    "section": "Part 5. Finding, vetting and using other packages",
    "text": "Part 5. Finding, vetting and using other packages\nNow that you’ve made your own package, let’s dive into packages that other developers have made so that we do more data science and less reinventing the wheel with code to do common useful things.\nLet’s spend a bit of time learning how to search for, choose, investigate put to use some R & Python Packages.\n\nFinding packages\n\nCRAN Task Views (search by topic): https://cran.r-project.org/web/views/\nMicrosoft R Application Network (MRAN) (search by keywords): https://mran.microsoft.com/packages\nSome trusted & awesome package sources:\n\nROpenSci: https://ropensci.org/packages/\nRStudio: https://www.rstudio.com/\npyOpenSci: https://www.pyopensci.org/\n\nOther great places to learn about package updates, releases, use:\n\n#rstats on Twitter (seriously)\nR Views blog by Joseph Rickert\nAlso…just a lot of googling (and using useful keywords, e.g. “tidyverse”)\n\n\n\n\nExploring / vetting packages\nExplore packages:\n\nUsually, on their GitHub repo\nContributors\nActivity (recent commits?)\nIssues (and responses)?\nHow many packages depend on this packages?\n\nDig a bit deeper:\n\nSource code\npkgdown website\nrelevant citations\n\n\n\nUsing and citing packages\nInstallation\nWe’ve seen the two main ways you’ll install R packages:\n\nFrom CRAN (using install.packages(\"packagename\"))\nFrom GitHub (using devtools::install_github(\"username/packagename\") or remotes::install_github(\"username/packagename\")\n\nNote: There are other ways to get R packages. For example, Bioconductor provides “open source software for bioinformatics” and is home to a lot of great software & packages for genomics work. See the Bioconductor installation page for information about how to install their packages & tools.\nWhat about Python packages? We haven’t dealt with this at all, since most of the packages we need are installed with Anaconda. What id we need something different?\nFollow along to make sure you can install packages with pip:\n\nOpen the Terminal\nCheck for pip by running the appropriate commands (make sure you choose the correct one for your OS)\nInstall pip if necessary (follow along with commands here)\nInstall Python packages by running the following in the command line, replacing “project_name”:\n\nMacOS: python3 -m pip install \"project_name\"\nWindows: py -m pip install \"project_name\"\n\n\nFor example, I have pip installed. To install the seaborn package, I run: python3 -m pip install \"seaborn\"\nGo ahead and try it: Use the appropriate command for your OS to install the Python version of the palmerpenguins package (also named palmerpenguins).\nUse and responsibility\nAnyone can make and publish an R or Python package to GitHub. That means it is your responsibility to determine if it is safe to use for your science. Once you’ve sufficiently explored, vetted and tested a package, the next step is to use it.\nCiting packages\nOpen source software is a major contribution to science and deserves to be credited. Often, developers are creating and maintaining packages voluntarily and without pay or support. Please remember to cite software and tools that helps you with your work.\nLuckily, packages (at least those on CRAN) come with a built-in citation to make it easy for you to see the citation. Use citation(packagename) to return package citation.\nFor example:\n\ncitation(\"palmerpenguins\")\n\nTo cite palmerpenguins in publications use:\n\n  Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer\n  Archipelago (Antarctica) penguin data. R package version 0.1.0.\n  https://allisonhorst.github.io/palmerpenguins/. doi:\n  10.5281/zenodo.3960218.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {palmerpenguins: Palmer Archipelago (Antarctica) penguin data},\n    author = {Allison Marie Horst and Alison Presmanes Hill and Kristen B Gorman},\n    year = {2020},\n    note = {R package version 0.1.0},\n    doi = {10.5281/zenodo.3960218},\n    url = {https://allisonhorst.github.io/palmerpenguins/},\n  }\n\n\nAnd an aside: R Markdown now makes it pretty nice to interface between your Zotero libraries and your R Markdown document. In the Visual Editor mode for R Markdown, you should see an `@` symbol. Clicking on it (if you have Zotero) should bring up your libraries.\n\nSelect the citation you want to insert. For example, data used in this example are from the palmerpenguins R package (Horst, Presmanes Hill, and Gorman 2020).\nClick on the citation text for a preview of how it’ll show up in the final document!\nLearn more about citations in R Markdown: https://blog.rstudio.com/2020/11/09/rstudio-1-4-preview-citations/"
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-5.html#end",
    "href": "course-materials/interactive-sessions/interactive-session-5.html#end",
    "title": "Day 5 Interactive Session Materials",
    "section": "END",
    "text": "END\nExtra unit test example (from lecture):\n\nfish_mass &lt;- function(alpha, beta, fish_length) {\n  \n  if (fish_length &lt;= 0) {\n    stop(\"Fish length must be greater than or equal to 0.\")\n  }\n  \n  mass &lt;- alpha * (fish_length ^ beta)\n  return(mass)\n  \n}\n\n# Unit tests\n\nexpect_length(fish_mass(alpha = 1, beta = 2, fish_length = 3), 2)\n\nError: fish_mass(alpha = 1, beta = 2, fish_length = 3) has length 1, not length 2.\n\n\nExtra Roxygen example:\n\n#' Calculate the distance traveled in miles\n#'\n#' @param rate a number in units of miles per hour\n#' @param time a number in units of hours\n#'\n#' @return a number indicating the distance traveled in miles\n#' @export\n#'\n#' @examples\ndistance &lt;- function(rate, time) {\n  dist &lt;- rate * time\n  return(dist)\n}"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day5.html",
    "href": "course-materials/eod-practice/eod-day5.html",
    "title": "Day 5 Activities",
    "section": "",
    "text": "Create a new repo on GitHub called eds221-day5-activities\nClone to create a version-controlled R Project\nCreate subfolders: docs, src, data, figs"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day5.html#setup",
    "href": "course-materials/eod-practice/eod-day5.html#setup",
    "title": "Day 5 Activities",
    "section": "",
    "text": "Create a new repo on GitHub called eds221-day5-activities\nClone to create a version-controlled R Project\nCreate subfolders: docs, src, data, figs"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day5.html#task-1-make-a-function-source-in-an-r-markdown-doc",
    "href": "course-materials/eod-practice/eod-day5.html#task-1-make-a-function-source-in-an-r-markdown-doc",
    "title": "Day 5 Activities",
    "section": "Task 1: Make a function, source in an R Markdown doc",
    "text": "Task 1: Make a function, source in an R Markdown doc\nCitation: NCDENR Stormwater BMP Manual\nOne established way to calculate the volume of stormwater expected for a watershed (necessary to design best management practices & systems) is the Simple Method, which involves two steps. First, the runoff coefficient \\(R_v\\) (storm runoff / storm rainfall) is calculated from: \\[R_v = 0.05 + 0.9 * I_A\\]\nWhere \\(R_v\\) is the runoff coefficient (unitless), and \\(I_A\\) is the fraction of the watershed that is considered “impervious” (unitless). The volume of stormwater that needs to be handled, \\(V\\) in cubic feet, is then calculated by: \\[V=3630 * R_D * R_v * A\\] where \\(R_D\\) is the “design storm rainfall depth” in inches, usually set to 1.0 or 1.5, \\(R_v\\) is the runoff coefficient calculated above, and \\(A\\) is the watershed area in acres.\nYOUR TASK:\n\nCreate a new R script in src, saved as storm_runoff.R\nIn the script, create a function called predict_runoff that estimates the storm runoff volume using inputs for the impervious fraction and watershed area (you can use a constant value of 1 for \\(R_D\\) here). In other words, your function should only require two arguments\nAdd documentation to your function using Roxygen comments for practice\nTry out your function in the Console to ensure that it works\nCreate a new R Markdown document in docs, saved as runoff_volumes.Rmd\nAttach the tidyverse and here packages\nSource your storm_runoff.R script so you are able to use the predict_runoff function in your .Rmd\nIn a code chunk in your runoff_volumes.Rmd, use your predict_runoff function to estimate stormwater volume for a watershed of 182 acres, over a range of estimates for the impervious fraction (from 0.6 to 0.8, by increments of 0.01). Note: you do not need to write a for loop here.\nBind your sequence of impervious fractions together with the resulting runoff volume calculated into a data frame\nCreate a ggplot graph that has both dots and connecting lines (i.e., you’ll layer geom_point() and geom_line(). Update axis labels. Export a png of your graph to the figs folder using ggsave.\n\nDone with Task 1"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day5.html#task-2-wild-data",
    "href": "course-materials/eod-practice/eod-day5.html#task-2-wild-data",
    "title": "Day 5 Activities",
    "section": "Task 2: Wild data",
    "text": "Task 2: Wild data\nFor Task 2, you will work with the us_tilapia_imports.csv. It exists in your eds221-day5-comp project - copy that file into your data folder for your day 5 activities project. The data are from the USDA Economic Research Service, and contain annual total volumes (in thousands of pounds) of tilapia imports to the United States from different countries.\nYou can decide if you want to do this all in separate steps, or piped together in sequence, or some combination. Make sure if you pipe things together, you check the output at every step.\n\nCreate a new .Rmd in your docs folder called us_tilapia_imports.Rmd\nAttach the tidyverse, here and janitor packages\nRead in the data as us_tilapia_imports\nExplore the data. What are the classes of the columns? Remember some tools we’ve used: summary, names, dim, skim, etc.\nUse pivot_longer() to reshape the data into long format (currently, the variable “year” is spread across multiple columns). Remember to store the output so you will be able to use the reshaped data this creates.\nCheck the class of the year column. What is it, and why do you think that’s the case? Then, coerce the year column to numeric (e.g. using mutate() and as.numeric() in combination)\nUse dplyr::group_by() %&gt;% summarize() to find the total US tilapia imports by year, store as yearly_tilapia_tot\nCreate a ggplot line graph of total US tilapia imports for all years in yearly_tilapia_tot. Update axis labels (include units as necessary), then export your graph as a .png to figs.\nCreate a subset that only retains imports from Ecuador, Honduras, Costa Rica, and Mexico (you decide what to name this)\nCreate a ggplot graph of total US tilapia imports over time, for those four countries in the subset you created above, separated by country. Update axis labels, add a title, customize your color scheme, update the theme. Export a .jpg of your graph to figs.\n\nDone with Task 2."
  },
  {
    "objectID": "course-materials/eod-practice/eod-day5.html#task-3-add-to-your-r-package",
    "href": "course-materials/eod-practice/eod-day5.html#task-3-add-to-your-r-package",
    "title": "Day 5 Activities",
    "section": "Task 3: Add to your R package",
    "text": "Task 3: Add to your R package\nFor Task 3, reopen your R package you started today, and add two new functions. They can do whatever you want as long as:\n\nThey have at least two required arguments\nYou add documentation for each function with a Roxygen skeleton\n\nOnce you’ve added your functions, make sure to devtools::document(), Install and Restart, and check to make sure your functions are working, and that you can see your documentation. Then:\n\nPush your changes back to your repo on GitHub\nShare the link with someone (they’ll need to reinstall your package from GitHub using install_github(\"username/reponame\"))"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day5.html#end-day-5-activities",
    "href": "course-materials/eod-practice/eod-day5.html#end-day-5-activities",
    "title": "Day 5 Activities",
    "section": "END Day 5 activities",
    "text": "END Day 5 activities"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day4.html",
    "href": "course-materials/eod-practice/eod-day4.html",
    "title": "Day 4 Activities",
    "section": "",
    "text": "Create a repo on GitHub named eds221-day4-activities\nClone to create a version-controlled R Project\nCreate some subfolder infrastructure (docs, data)\nAdd a new Quarto file, save as loops_and_functions.qmd in docs"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day4.html#part-0.-setup",
    "href": "course-materials/eod-practice/eod-day4.html#part-0.-setup",
    "title": "Day 4 Activities",
    "section": "",
    "text": "Create a repo on GitHub named eds221-day4-activities\nClone to create a version-controlled R Project\nCreate some subfolder infrastructure (docs, data)\nAdd a new Quarto file, save as loops_and_functions.qmd in docs"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day4.html#part-1.-for-loops-revisited",
    "href": "course-materials/eod-practice/eod-day4.html#part-1.-for-loops-revisited",
    "title": "Day 4 Activities",
    "section": "Part 1. For loops revisited",
    "text": "Part 1. For loops revisited\n\nTask 1\nCreate two sequences, one called weekdays that contains days of the week (“Monday”, “Tuesday”, “Wednesday”, etc.) and one called transects that contains the series of transect names “Transect A”, “Transect B,”Transect C”. Write a nested for loop that creates a matrix containing the following:\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonday - Transect A\nMonday - Transect B\nMonday - Transect C\n\n\nTuesday - Transect A\nTuesday - Transect B\nTuesday - Transect C\n\n\nWednesday - Transect A\nWednesday - Transect B\nWednesday - Transect C\n\n\nThursday - Transect A\nThursday - Transect B\nThursday - Transect C\n\n\nFriday - Transect A\nFriday - Transect B\nFriday - Transect C\n\n\nSaturday - Transect A\nSaturday - Transect B\nSaturday - Transect C\n\n\nSunday - Transect A\nSunday - Transect B\nSunday - Transect C"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day4.html#part-2.-functions-introduced",
    "href": "course-materials/eod-practice/eod-day4.html#part-2.-functions-introduced",
    "title": "Day 4 Activities",
    "section": "Part 2. Functions introduced",
    "text": "Part 2. Functions introduced\n\nTask 2\nWrite a function called force that calculates a force (in Newtons), given inputs of mass (in kg) and acceleration (in \\(\\frac{m}{s^2}\\) (recall: \\(F = ma\\)), and returns a statement “The resulting force is ___ Newtons.”\n\n\n\nTask 3\nThe length:weight relationship for fish is: \\(W=aL^b\\), where where L is total fish length (centimeters), W is the expected fish weight (grams), and a and b are species-dependent parameter values (shown below for several fish from Peyton et al. 2016).\n\n\n\n\n\n\nsci_name\ncommon_name\na_est\nb_est\n\n\n\n\nChanos chanos\nMilkfish\n0.0905\n2.52\n\n\nSphyraena barracuda\nGreat barracuda\n0.0181\n3.27\n\n\nCaranx ignobilis\nGiant trevally\n0.0353\n3.05\n\n\n\n\n\n\n\n\nRecreate the table above as a data frame stored as fish_parms. Then, write a function called fish_weight that allows a user to only enter the common name (argument fish_name) and total length (argument tot_length) (in centimeters) of a fish, to return the expected fish weight in grams. Test it out for different species and lengths.\nNow, try creating a vector of lengths (e.g. 0 to 100, by increments of 1) and ensuring that your function will calculate the fish weight over a range of lengths for the given species (try this for milkfish, storing the output weights as milkfish_weights.\n\n\nTask 4\nWave power (more accurately wave energy flux) in deep water is approximated by:\n\\[P_{deep}=0.5 H^2 T\\] where \\(P\\) is power in \\(\\frac{kW}{m}\\) (potential power per wave meter), \\(H\\) is wave height in meters (more specifically, the significant wave height), and \\(T\\) is the wave period in seconds. Learn more here.\nWrite a function called wave_power that calculates potential ocean wave power given inputs of wave height and period.\nUse your wave_power function to approximate wave power for a period of 8 seconds, over a range of wave heights from 0 to 3 meters by increments of 0.2 meters.\n\n\nTask 5 (OPTIONAL)\nThe wave energy equation changes based on ocean depth. Along the coast of Brenville, which has a very sharp shelf as the wave approaches the coast, wave energy is approximated using the deep ocean equation (the one you used above) for depths &gt; 12 meters, and a shallow equation for depths &lt;= 12 meters. The Brenville team estimates shallow wave power by:\n\\[P_{shallow}=0.81 H^2 T\\]\nCreate a function that requires inputs of water depth, wave height and period, then returns the approximated wave power using the correct equation for the depth entered. It should also include a message (hint: use message() just like you would use warning!) that lets the user know if the shallow or deep water equation was used.\n\n\n\nCitations\nPeyton, K. A., T. S. Sakihara, L. K. Nishiura, T. T. Shindo, T. E. Shimoda, S. Hau, A. Akiona, and K. Lorance. 2016. “Length–Weight Relationships for Common Juvenile Fishes and Prey Species in Hawaiian Estuaries.” Journal of Applied Ichthyology 32 (3): 499–502. https://doi.org/10.1111/jai.12957."
  },
  {
    "objectID": "course-materials/eod-practice/eod-day6.html",
    "href": "course-materials/eod-practice/eod-day6.html",
    "title": "Day 6 Activities",
    "section": "",
    "text": "Take ~15 minutes to read Broman & Woo’s evergreen paper Data organization in spreadsheets. As you read, think about data that you have created or had to work with that did not follow these guidelines. Make notes of examples to share from several - how did you input data previously? How would you change the way you input data?\nQuestions:\n\nWhat are major / most common ways you have seen these guidelines ignored?\nWhat is your experience working with or creating data in spreadsheets that don’t follow these guidelines?"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day6.html#task-1-read-broman-woos-data-organization-in-spreadsheets",
    "href": "course-materials/eod-practice/eod-day6.html#task-1-read-broman-woos-data-organization-in-spreadsheets",
    "title": "Day 6 Activities",
    "section": "",
    "text": "Take ~15 minutes to read Broman & Woo’s evergreen paper Data organization in spreadsheets. As you read, think about data that you have created or had to work with that did not follow these guidelines. Make notes of examples to share from several - how did you input data previously? How would you change the way you input data?\nQuestions:\n\nWhat are major / most common ways you have seen these guidelines ignored?\nWhat is your experience working with or creating data in spreadsheets that don’t follow these guidelines?"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day6.html#task-2-sbc-lobsters",
    "href": "course-materials/eod-practice/eod-day6.html#task-2-sbc-lobsters",
    "title": "Day 6 Activities",
    "section": "Task 2: SBC Lobsters",
    "text": "Task 2: SBC Lobsters\nData source: Santa Barbara Coastal LTER, D. Reed, and R. Miller. 2021. SBC LTER: Reef: Abundance, size and fishing effort for California Spiny Lobster (Panulirus interruptus), ongoing since 2012 ver 6. Environmental Data Initiative. https://doi.org/10.6073/pasta/0bcdc7e8b22b8f2c1801085e8ca24d59\n\nGetting started\n\nCreate a new GitHub repo called eds221-day6-activities\nClone to create a version controlled R project\nAdd subfolders data and docs\nDownload the California Spiny lobster abundance data from this SBC LTER data package. Familiarize yourself with the metadata. Save the CSV containing lobster abundance data in your data subfolder.\nIn docs, create a new .Rmd or .qmd saved with file prefix lobster_exploration\nWithin your notebook, write organized and well-annotated code to do the following:\n\nRead in and take a look at the data in the data/Lobster_Abundance_All_Years_20210412.csv file. Take note of values that can be considered NA (see metadata) and update your import line to convert those to NA values\nConvert column names to lower snake case\nConvert the data from frequency to case format using dplyr::uncount() on the existing count column. What did this do? Add annotation in your code explaining dplyr::uncount()\n\n\nHere’s code to read in your data, just to get your started:\n\nlobsters &lt;- read_csv(here(\"data\",\"Lobster_Abundance_All_Years_20210412.csv\"), na = c(\"-99999\", \"\")) %&gt;% \n  clean_names() %&gt;% \n  uncount(count)\n\n\n\nFind counts and mean sizes by site & year\n\nCreate a summary table that finds the total counts (see: n()), and mean carapace lengths of lobsters observed in the dataset by site and year.\nCreate a ggplot graph of the number of total lobsters observed (y-axis) by year (x-axis) in the study, grouped (either aesthetically or by faceting) by site\n\n\n\nFind the proportion of legal lobsters at each site for 2020\nThe legal lobster size (carapace length) in California is 79.76 mm.\n\nCreate a subset that only contains lobster data from 2020 (note: this should be from the original data you read in, not the summary table you created above)\nWrite code (you can decide how to do this - there are a number of ways) to find the counts of lobsters observed at each site (only using site as the grouping factor) that are above and below the legal limit. Hint: You may want to add a new column legal that contains “yes” or “no” based on the size of the observed lobster (see dplyr::case_when() for a really nice way to do this), then use group_by() %&gt;% summarize(n()) or dplyr::count() to get counts by group within variables\nCreate a stacked column graph that shows the proportion of legal and non-legal lobsters at each site. **Hint: create a stacked column graph with geom_col(), then add the argument position = \"fill\" to convert from a graph of absolute counts to proportions.\n\nWhich two sites had the largest proportion of legal lobsters in 2020? Explore the metadata to come up with a hypothesis about why that might be."
  },
  {
    "objectID": "course-materials/eod-practice/eod-day6.html#task-3-random-lobster-wrangling",
    "href": "course-materials/eod-practice/eod-day6.html#task-3-random-lobster-wrangling",
    "title": "Day 6 Activities",
    "section": "Task 3: Random lobster wrangling",
    "text": "Task 3: Random lobster wrangling\nStarting with the original lobsters data that you read in as lobsters, complete the following (separately - these are not expected to be done in sequence or anything). You can store each of the outputs as ex_a, ex_b, etc. for the purposes of this task.\n\nfilter() practice\n\nCreate and store a subset that only contains lobsters from sites “IVEE”, “CARP” and “NAPL”. Check your output data frame to ensure that only those three sites exist.\nCreate a subset that only contains lobsters observed in August.\nCreate a subset with lobsters at Arroyo Quemado (AQUE) OR with a carapace length greater than 70 mm.\nCreate a subset that does NOT include observations from Naples Reef (NAPL)\n\n\n\ngroup_by() %&gt;% summarize() practice\n\nFind the mean and standard deviation of lobster carapace length, grouped by site.\nFind the maximum carapace length by site and month.\n\n\n\nmutate() practice\n\nAdd a new column that contains lobster carapace length converted to centimeters. Check output.\nUpdate the site column to all lowercase. Check output.\nConvert the area column to a character (not sure why you’d want to do this, but try it anyway). Check output.\n\n\n\ncase_when() practice\n\nUse case_when() to add a new column called size_bin that contains “small” if carapace size is &lt;= 70 mm, or “large” if it is greater than 70 mm. Check output.\nUse case_when() to add a new column called designation that contains “MPA” if the site is “IVEE” or “NAPL”, and “not MPA” for all other outcomes."
  }
]