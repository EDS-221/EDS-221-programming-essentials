[
  {
    "objectID": "course-materials/day1.html#class-materials",
    "href": "course-materials/day1.html#class-materials",
    "title": "Intro to programming",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 1 / morning\nCourse introduction, programming in EDS, meet our tools\nDon’t fear the Terminal - continuing with some commands, navigation, and more git\n\n\nday 1 / afternoon\nProject oriented workflows, file paths, naming things; good habits from the tidyverse style guide\nMeet {here}, project organization, adding data import to our workflow"
  },
  {
    "objectID": "course-materials/day1.html#end-of-day-practice",
    "href": "course-materials/day1.html#end-of-day-practice",
    "title": "Intro to programming",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 1 Practice: Project organization, data import, file paths"
  },
  {
    "objectID": "course-materials/day1.html#additional-resources",
    "href": "course-materials/day1.html#additional-resources",
    "title": "Intro to programming",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day2.html#class-materials",
    "href": "course-materials/day2.html#class-materials",
    "title": "Data representations",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 2 / morning\nData representations and types\nCreating and indexing with different data types in R and Python\n\n\nday 2 / afternoon\nCommon data types and structures in EDS\nData in R: accessing / updating elements & casting continued"
  },
  {
    "objectID": "course-materials/day2.html#end-of-day-practice",
    "href": "course-materials/day2.html#end-of-day-practice",
    "title": "Data representations",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 2 Practice: Exploring data types, indexing, importing, and plotting"
  },
  {
    "objectID": "course-materials/day2.html#additional-resources",
    "href": "course-materials/day2.html#additional-resources",
    "title": "Data representations",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day7.html#class-materials",
    "href": "course-materials/day7.html#class-materials",
    "title": "Data wrangling",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 7 / morning\nData wrangling continued - more tidying, relational data & types of joins\nData wrangling continued: joins\n\n\nday 7 / afternoon\nData wrangling continued - working with dates & times, wrangling strings\nData wrangling continued: dates, times, strings"
  },
  {
    "objectID": "course-materials/day7.html#end-of-day-practice",
    "href": "course-materials/day7.html#end-of-day-practice",
    "title": "Data wrangling",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 7 Practice: Wrangling continued: joins, strings, dates"
  },
  {
    "objectID": "course-materials/day7.html#additional-resources",
    "href": "course-materials/day7.html#additional-resources",
    "title": "Data wrangling",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day4.html#class-materials",
    "href": "course-materials/day4.html#class-materials",
    "title": "Introduction to functions",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 4 / morning\nIntroduction to writing functions in R & Python\nFunctions 101: basics\n\n\nday 4 / afternoon\nFunctions continued: planning, adding useful messages, more advanced functions and outputs\nFunctions 102: beyond basics"
  },
  {
    "objectID": "course-materials/day4.html#end-of-day-practice",
    "href": "course-materials/day4.html#end-of-day-practice",
    "title": "Introduction to functions",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 4 Practice: Intro to functions"
  },
  {
    "objectID": "course-materials/day4.html#additional-resources",
    "href": "course-materials/day4.html#additional-resources",
    "title": "Introduction to functions",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day8.html#class-materials",
    "href": "course-materials/day8.html#class-materials",
    "title": "Grammar of graphics",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 8 / morning\nThe grammar of graphics & basic graph considerations\nData visualization in ggplot2\n\n\nday 8 / afternoon\nData visualization basics - responsible, clear, awesome\nData viz continued"
  },
  {
    "objectID": "course-materials/day8.html#end-of-day-practice",
    "href": "course-materials/day8.html#end-of-day-practice",
    "title": "Grammar of graphics",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 8 Practice: Data visualization"
  },
  {
    "objectID": "course-materials/day8.html#additional-resources",
    "href": "course-materials/day8.html#additional-resources",
    "title": "Grammar of graphics",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nCed Scherer’s ggplot2 tutorial\nYan Holtz’ From Data to Viz\nR Graph Gallery"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Scientific Programming Essentials",
    "section": "Course Description",
    "text": "Course Description\nThis course teaches key scientific programming skills and demonstrates the application of these techniques to environmental data analysis and problem solving. Topics include structured programming and algorithm development, flow control, simple and advanced data input-output and representation, functions and objects, documentation, testing and debugging. The course will be taught using a combination of the R and Python programming languages.\nBy the end of EDS 221, students should be able to:\n\nUnderstand, create, and work with different data structures (e.g. vectors, data frames, lists) and types (e.g. numeric, character, factor, logical, date-times)\nDesign, implement, test, and document functions, including functions with iteration, conditionals, messages, and warnings in R\nUse basic (non-collaborative) project-oriented workflos with reproducible code (R scripts, Quarto documents, Jupyter notebooks) and version control (git/GitHub basics)\nPerform basic data wrangling and visualization with real world environmental data and tidyverse packages (in R)\nEmploy troubleshooting and debugging strategies including tools, mindsets, strategies, and resources"
  },
  {
    "objectID": "index.html#teaching-team",
    "href": "index.html#teaching-team",
    "title": "Scientific Programming Essentials",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\n\nInstructor\n\n\n\n\n\n\n\n\n\n\n\nRuth Oliver\nEmail: rutholiver@ucsb.edu\nLearn more: ryoliver-lab.github.io\n\n\n\n\nTA\n\n\n\n\n\n\n\n\n\n\n\nAnna Pede\nEmail: test\nLearn more: tbd"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Scientific Programming Essentials",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nEDS 221 was originally developed and taught by Allison Horst. This new website houses materials which are heavily reused, adapted from, and inspired by Allison’s original work."
  },
  {
    "objectID": "course-materials/day10.html#class-materials",
    "href": "course-materials/day10.html#class-materials",
    "title": "Collaboration tools",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 10 / morning\n\nR packages revisited, tables in R, a taste of git collaboration\n\n\nday 10 / afternoon\nCourse wrap-up"
  },
  {
    "objectID": "course-materials/day10.html#end-of-day-practice",
    "href": "course-materials/day10.html#end-of-day-practice",
    "title": "Collaboration tools",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 10 Morning Practice: GitHub collaboration\n Day 10 Afternoon Practice: Data import, exploration, & visualization"
  },
  {
    "objectID": "course-materials/day10.html#additional-resources",
    "href": "course-materials/day10.html#additional-resources",
    "title": "Collaboration tools",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day9.html#class-materials",
    "href": "course-materials/day9.html#class-materials",
    "title": "Troubleshooting",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 9 / morning\nTroubleshooting 101\nTeach Me How to Google Workshop (with Sam Csik)\n\n\nday 9 / afternoon\nkable tables & alt-text\nMore wrangling tools and practice, kable tables"
  },
  {
    "objectID": "course-materials/day9.html#end-of-day-practice",
    "href": "course-materials/day9.html#end-of-day-practice",
    "title": "Troubleshooting",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 9 Practice: Troubleshooting, reprex, & working with data continued"
  },
  {
    "objectID": "course-materials/day9.html#additional-resources",
    "href": "course-materials/day9.html#additional-resources",
    "title": "Troubleshooting",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day5.html#class-materials",
    "href": "course-materials/day5.html#class-materials",
    "title": "Testing, documentation, and sharing",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 5 / morning\nFunctions continued: testing, documentation, sharing\nFunctions 103: testing & documenting, making your first package\n\n\nday 5 / afternoon\nFinding & using external packages\nFind & explore packages, documentation, accessing from repos"
  },
  {
    "objectID": "course-materials/day5.html#end-of-day-practice",
    "href": "course-materials/day5.html#end-of-day-practice",
    "title": "Testing, documentation, and sharing",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 5 Practice: Loops revisited, functions continued, testing & sourcing scripts, working on your R package"
  },
  {
    "objectID": "course-materials/day5.html#additional-resources",
    "href": "course-materials/day5.html#additional-resources",
    "title": "Testing, documentation, and sharing",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day6.html#class-materials",
    "href": "course-materials/day6.html#class-materials",
    "title": "Tidy data",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 6 / morning\nTidy data: what, why, how?\nTidying data (pivot, separate) basics with tidyr and pandas\n\n\nday 6 / afternoon\nData tidying and wrangling continued: dplyr and pandas\nData wrangling continued - dplyr and pandas"
  },
  {
    "objectID": "course-materials/day6.html#end-of-day-practice",
    "href": "course-materials/day6.html#end-of-day-practice",
    "title": "Tidy data",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 6 Practice: Tidying & subsetting with tidyr and dplyr"
  },
  {
    "objectID": "course-materials/day6.html#additional-resources",
    "href": "course-materials/day6.html#additional-resources",
    "title": "Tidy data",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "course-materials/day3.html#class-materials",
    "href": "course-materials/day3.html#class-materials",
    "title": "Conditionals and logical operators",
    "section": "Class materials",
    "text": "Class materials\n\n\n\n\n\n\n\n\n Session\n Lecture slides\n Interactive session\n\n\n\n\nday 3 / morning\nConditionals and logical operations, intro to for loops\nRefresh logical operations, write basics for loops in R\n\n\nday 3 / afternoon\nLoops continued - and functions to help\nFor loops with conditions, apply() functions, and across()"
  },
  {
    "objectID": "course-materials/day3.html#end-of-day-practice",
    "href": "course-materials/day3.html#end-of-day-practice",
    "title": "Conditionals and logical operators",
    "section": "End-of-day practice",
    "text": "End-of-day practice\nComplete the following tasks / activities before heading home for the day!\n\n Day 3 Practice: Conditionals & for loops"
  },
  {
    "objectID": "course-materials/day3.html#additional-resources",
    "href": "course-materials/day3.html#additional-resources",
    "title": "Conditionals and logical operators",
    "section": "Additional Resources",
    "text": "Additional Resources\nTBD"
  },
  {
    "objectID": "interactive-session-1b.html",
    "href": "interactive-session-1b.html",
    "title": "Interactive Session 1B",
    "section": "",
    "text": "Fork and clone this repo\nCheck out the project structure & files"
  },
  {
    "objectID": "interactive-session-1b.html#setup",
    "href": "interactive-session-1b.html#setup",
    "title": "Interactive Session 1B",
    "section": "",
    "text": "Fork and clone this repo\nCheck out the project structure & files"
  },
  {
    "objectID": "interactive-session-1b.html#file-path-practice",
    "href": "interactive-session-1b.html#file-path-practice",
    "title": "Interactive Session 1B",
    "section": "File path practice",
    "text": "File path practice\n\nWe’ll run through each line in the toolik_airtemp_summary.qmd to understand where it’s pointing, what it’s doing, and add a few more tools to our coding toolkit (readr::read_csv(), janitor::clean_names(), %&gt;%)\nSimilarly, we’ll create from scratch & work through one more example. We will:\n\nRead in the chlorophyll data\nExplore the imported data\nClean up the dataset names\nCreate a plot of chlorophyll concentration at varying measurement depth, do some customization\nExport the graph to /figs\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# read in data\ntoolik_chlorophyll &lt;- read_csv(here::here(\"data\", \"data-raw\", \"toolik_chlorophyll.csv\"))\n\n# get data overview\nskimr::skim(toolik_chlorophyll)\n\ndim(toolik_chlorophyll)\nnames(toolik_chlorophyll)\n\n# clean names\ntoolik_chlorophyll &lt;- toolik_chlorophyll %&gt;% clean_names() \n\n# make plot\ntoolik_chlorophyll_plot &lt;- ggplot(data = toolik_chlorophyll, \n                                  aes(x = depth, y = as.numeric(active_chl_a_ug_l))) +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Toolik Station Chlorophyll a concentration\",\n       x = \"Depth (m)\",\n       y = \"Chlorophyll a concentration (micrograms per liter)\")\n\ntoolik_chlorophyll_plot\n\n# save plot\nggsave(here::here(\"figs\", \"toolik_chlorophyll_plot.png\"), height = 6, width = 7)"
  },
  {
    "objectID": "interactive-session-1b.html#data-sources",
    "href": "interactive-session-1b.html#data-sources",
    "title": "Interactive Session 1B",
    "section": "Data sources",
    "text": "Data sources\nAll datasets are collected and provided by scientists with the Toolik Station Long Term Ecological Research (LTER) site, Alaska.\nToolik Station Meteorological Data: toolik_weather.csv Shaver, G. 2019. A multi-year DAILY weather file for the Toolik Field Station at Toolik Lake, AK starting 1988 to present. ver 4. Environmental Data Initiative. https://doi.org/10.6073/pasta/ce0f300cdf87ec002909012abefd9c5c (Accessed 2021-08-08).\nToolik Lake Chlorophyll: toolik_chlorophyll.csv Miller, M. 2014. Chlorophyll A, and primary productivity of Toolik lake , Arctic LTER 1975 to 1988, Toolik Filed Station, Alaska. ver 5. Environmental Data Initiative. https://doi.org/10.6073/pasta/6738024bf0174f73b3f74486f43d1059 (Accessed 2021-08-08).\nToolik fish: toolik_fish.csv Budy, P., C. Luecke, and M. McDonald. 2020. Fish captures in lakes of the Arctic LTER region Toolik Field Station Alaska from 1986 to present. ver 6. Environmental Data Initiative. https://doi.org/10.6073/pasta/d0a9358f783339821b82510eb8c61b45 (Accessed 2021-08-08)."
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html",
    "title": "Interactive Session 2A",
    "section": "",
    "text": "Create a repo on GitHub called eds221-day2-comp\nClone to make a version-controlled R Project\nCreate a new Quarto Markdown, saved in the root as r-data-types\nCreate a new Jupyter Notebook, saved in the root as py-data-types"
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html#vectors",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html#vectors",
    "title": "Interactive Session 2A",
    "section": "Vectors!",
    "text": "Vectors!\n\nMaking vectors\n\nA character vector\n\ndogs &lt;- c(\"teddy\", \"khora\", \"waffle\", \"banjo\")\n\ntypeof(dogs)\n\n[1] \"character\"\n\nclass(dogs)\n\n[1] \"character\"\n\n\n\n\nA numeric vector\n\nweights &lt;- c(50, 55, 25, 35)\n\ntypeof(weights) # Hmmm what is different about this and the line below?\n\n[1] \"double\"\n\nclass(weights)\n\n[1] \"numeric\"\n\n\n\n\nAn integer vector\n\ndog_age &lt;- c(5L, 6L, 1L, 7L)\n\ntypeof(dog_age)\n\n[1] \"integer\"\n\nclass(dog_age)\n\n[1] \"integer\"\n\n# Check with a logical: \nis.numeric(dog_age)\n\n[1] TRUE\n\n\n\n\nWhat if we combine classes?\nThere is a hierarchy of classes. The broadest of all in a vector wins (if there are characters, then character will be the class of the entire vector).\n\ndog_info &lt;- c(\"teddy\", 50, 5L)\ndog_info\n\n[1] \"teddy\" \"50\"    \"5\"    \n\ntypeof(dog_info)\n\n[1] \"character\"\n\nclass(dog_info)\n\n[1] \"character\"\n\nis.character(dog_info)\n\n[1] TRUE\n\n\n\n\nNamed elements\n\ndog_food &lt;- c(teddy = \"purina\", khora = \"alpo\", waffle = \"fancy feast\", banjo = \"blue diamond\")\ndog_food\n\n         teddy          khora         waffle          banjo \n      \"purina\"         \"alpo\"  \"fancy feast\" \"blue diamond\" \n\nclass(dog_food)\n\n[1] \"character\"\n\ntypeof(dog_food)\n\n[1] \"character\"\n\n\n\n\n\nAccessing bits of vectors\nUse [] with the position or name to access elements of a vector.\n\ndog_food[2]\n\n khora \n\"alpo\" \n\ndog_food[\"khora\"]\n\n khora \n\"alpo\" \n\n\nOr we can specify a range of values within a vector using [:]. The first element in R vectors is assigned element = 1. This is an important distinction. In Python, the first element is assigned 0 (zero-index).\n\n# Create a vector of car colors observed\ncars &lt;- c(\"red\", \"orange\", \"white\", \"blue\", \"green\", \"silver\", \"black\")\n\n# Access just the 5th element\ncars[5]\n\n[1] \"green\"\n\n# Access elements 2 through 4\ncars[2:4]\n\n[1] \"orange\" \"white\"  \"blue\"  \n\n\n\n\nA warm-up for for loops:\n\ni &lt;- 4\ncars[i]\n\n[1] \"blue\"\n\ni &lt;- seq(1:3)\ncars[i]\n\n[1] \"red\"    \"orange\" \"white\" \n\n\n\n\nAnd we can update elements of a vector directly (mutable):\n\ncars[3] &lt;- \"BURRITOS!\"\ncars\n\n[1] \"red\"       \"orange\"    \"BURRITOS!\" \"blue\"      \"green\"     \"silver\"   \n[7] \"black\""
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html#matrices",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html#matrices",
    "title": "Interactive Session 2A",
    "section": "Matrices!",
    "text": "Matrices!\n\nCreating matrices\n(…we did some of this in EDS 212 too!)\n\nfish_size &lt;- matrix(c(0.8, 1.2, 0.4, 0.9), ncol = 2, nrow = 2, byrow = FALSE)\n\nfish_size\n\n     [,1] [,2]\n[1,]  0.8  0.4\n[2,]  1.2  0.9\n\ntypeof(fish_size) # Returns the class of values\n\n[1] \"double\"\n\nclass(fish_size) # Returns matrix / array\n\n[1] \"matrix\" \"array\" \n\n\nWhat happens if we try to combine multiple data types into a matrix?\n\ndog_walk &lt;- matrix(c(\"teddy\", 5, \"khora\", 10), ncol = 2, nrow = 2, byrow = FALSE)\n\ndog_walk\n\n     [,1]    [,2]   \n[1,] \"teddy\" \"khora\"\n[2,] \"5\"     \"10\"   \n\nclass(dog_walk)\n\n[1] \"matrix\" \"array\" \n\ntypeof(dog_walk)\n\n[1] \"character\"\n\n# Hmmmmmm once again back to the broadest category of data type in the hierarchy\n\n\n\nAccessing pieces of matrices\nIndex using [row, column].\n\nwhale_travel &lt;- matrix(data = c(31.8, 1348, 46.9, 1587), nrow = 2, ncol = 2, byrow = TRUE)\n\n# Take a look\nwhale_travel\n\n     [,1] [,2]\n[1,] 31.8 1348\n[2,] 46.9 1587\n\n# Access the value 1348\nwhale_travel[1,2] # Row 1, column 2\n\n[1] 1348\n\n# Access the value 46.9\nwhale_travel[2,1]\n\n[1] 46.9\n\n\nIf you leave any element blank (keeping the comma), it will return all values from the other element. For example, to get everything in row 2:\n\nwhale_travel[2,]\n\n[1]   46.9 1587.0\n\n\nOr, to access everything in column 1:\n\nwhale_travel[, 1]\n\n[1] 31.8 46.9\n\n\nWhat happens if I only give a matrix one element? That’s the position in the matrix as if populated by column. Check out a few:\n\nwhale_travel[3]\n\n[1] 1348"
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html#lists",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html#lists",
    "title": "Interactive Session 2A",
    "section": "Lists",
    "text": "Lists\n\nurchins &lt;- list(\"blue\", c(1, 2, 3), c(\"a cat\", \"a dog\"), 5L)\n\nurchins\n\n[[1]]\n[1] \"blue\"\n\n[[2]]\n[1] 1 2 3\n\n[[3]]\n[1] \"a cat\" \"a dog\"\n\n[[4]]\n[1] 5\n\n\n\nAccessing pieces of a list\nImportant: a single [] returns a list. [[]] returns the item STORED in the list.\n\nurchins[[2]]\n\n[1] 1 2 3\n\n# Compare that to: \nurchins[2]\n\n[[1]]\n[1] 1 2 3\n\n\n\n\nNaming list items? Sure thing!\n\ntacos &lt;- list(topping = c(\"onion\", \"cilantro\", \"guacamole\"), filling = c(\"beans\", \"meat\", \"veggie\"), price = c(6.75, 8.25, 9.50))\n\n# The whole thing\ntacos\n\n$topping\n[1] \"onion\"     \"cilantro\"  \"guacamole\"\n\n$filling\n[1] \"beans\"  \"meat\"   \"veggie\"\n\n$price\n[1] 6.75 8.25 9.50\n\n# Just get one piece of it: \ntacos[[2]]\n\n[1] \"beans\"  \"meat\"   \"veggie\"\n\n#...or, the same thing:\ntacos$filling\n\n[1] \"beans\"  \"meat\"   \"veggie\""
  },
  {
    "objectID": "course-materials/interactive-sessions/interactive-session-2a.html#data-frames",
    "href": "course-materials/interactive-sessions/interactive-session-2a.html#data-frames",
    "title": "Interactive Session 2A",
    "section": "Data frames",
    "text": "Data frames\nA data frame is a list containing vectors of the same length, where each column is a variable stored in a vector. Let’s make one:\n\nfruit &lt;- data.frame(type = c(\"apple\", \"banana\", \"peach\"), \n                    mass = c(130, 195, 150))\n\n# Look at it\nfruit\n\n    type mass\n1  apple  130\n2 banana  195\n3  peach  150\n\n# Check the class\nclass(fruit)\n\n[1] \"data.frame\"\n\n\n\nAccess elements from a data frame\nUse [row#, col#], or name the column (then element number).\n\nfruit[1,2]\n\n[1] 130\n\nfruit[3,1]\n\n[1] \"peach\"\n\n\n\nfruit[2,1] &lt;- \"pineapple\"\nfruit\n\n       type mass\n1     apple  130\n2 pineapple  195\n3     peach  150"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day2.html",
    "href": "course-materials/eod-practice/eod-day2.html",
    "title": "Day 2 Activities",
    "section": "",
    "text": "Create a new repo on GitHub for today’s activities\nClone to create a version controlled R Project\nCreate subfolders called docs, data, and figs\nCreate a Quarto document, save in the docs subfolder as r_data_types.qmd\n\n\n\n\n\n\nIn your Quarto document:\n\nCreate a vector called vec_1containing the following:\n\n\n2, 5, 9, 10, 8, 12, 1, 0\n\nCheck the following for that vector:\n\nWhat is the class of the vector? class()\nWhat type of variable does it store? typeof()\nAccess the 3rd element and store as vec_1_e3\nAccess the 1st element and store as vec_1_e1\nAccess the 5th through 7th elements and store as vec_1_e5to7\nReassign vec_1 as a character using as.character, stored as vec_1_char. What does the output look like?\n\n\nCreate a vector called vec_2\n\nvec_2 should contained named elements, where town = \"Santa Barbara, location = \"Rincon\", swell = \"south\"\n\nTake a look at what you’ve made\nWhat is the class of vector elements? class()\nWhat is the length of vec_2?\nAccess the 2nd element by name and store as vec_2_e2\n\n\nCreate a data frame in R, index\n\nWrite code to create a data frame called df_1 that looks like this:\n\n\n  region     species count\n1      A       otter    12\n2      B great white     2\n3      A    sea lion    36\n4      D  gray whale     6\n\n\n\nReturn the class of the entire data frame\nReturn the class of the species column\nFind the maximum value of the count() column, store as max_count"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day2.html#part-1.-checking-data-types",
    "href": "course-materials/eod-practice/eod-day2.html#part-1.-checking-data-types",
    "title": "Day 2 Activities",
    "section": "",
    "text": "Create a new repo on GitHub for today’s activities\nClone to create a version controlled R Project\nCreate subfolders called docs, data, and figs\nCreate a Quarto document, save in the docs subfolder as r_data_types.qmd\n\n\n\n\n\n\nIn your Quarto document:\n\nCreate a vector called vec_1containing the following:\n\n\n2, 5, 9, 10, 8, 12, 1, 0\n\nCheck the following for that vector:\n\nWhat is the class of the vector? class()\nWhat type of variable does it store? typeof()\nAccess the 3rd element and store as vec_1_e3\nAccess the 1st element and store as vec_1_e1\nAccess the 5th through 7th elements and store as vec_1_e5to7\nReassign vec_1 as a character using as.character, stored as vec_1_char. What does the output look like?\n\n\nCreate a vector called vec_2\n\nvec_2 should contained named elements, where town = \"Santa Barbara, location = \"Rincon\", swell = \"south\"\n\nTake a look at what you’ve made\nWhat is the class of vector elements? class()\nWhat is the length of vec_2?\nAccess the 2nd element by name and store as vec_2_e2\n\n\nCreate a data frame in R, index\n\nWrite code to create a data frame called df_1 that looks like this:\n\n\n  region     species count\n1      A       otter    12\n2      B great white     2\n3      A    sea lion    36\n4      D  gray whale     6\n\n\n\nReturn the class of the entire data frame\nReturn the class of the species column\nFind the maximum value of the count() column, store as max_count"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day2.html#part-2.-wild-data",
    "href": "course-materials/eod-practice/eod-day2.html#part-2.-wild-data",
    "title": "Day 2 Activities",
    "section": "Part 2. Wild data",
    "text": "Part 2. Wild data\n\nSet-up\n\nVisit the EDI site to learn about Mack Creek salamander & cutthroat trout data you’ll be using here: data package\nDownload the first CSV listed (AS00601.csv), and take a look at it (outside of R is fine as a first step, e.g. you can open the CSV in Excel)\nExplore the metadata (see View Full Metadata in the Resources section of the data website)\nWhat does each column contain? What are the units of each? What is the study overall about?\nCreate a new Quarto document and save it in your docs folder. Attach the tidyverse, here and janitor packages in the setup chunk (you choose the file name)\nSet global options in the YAML so that messages and warnings do NOT show up in the rendered document\nSave the AS00601.csv in your data folder of your project\n\n\n\nRead in the data\n\nRead in the data using read_csv() with here(), store as mack_verts\nLook at what you’ve read in (e.g. with view())\n\n\n\nA bit of wrangling & exploring\n\nUpdate the variable names in mack_verts to lower snake case\nIn a new code chunk, practice accessing individual pieces of the data frame (there is no real functionality to this right now, but just to reinforce stuff we learned in our interactive session):\n\nStore the 5th value in column “WEIGHT” as mc_wt_5. Check by looking at your data frame to confirm.\nStore the 8th - 20th value in the “LENGTH1” column as mc_length_8_20. Check by looking at your data frame to confirm.\nStore everything in column SAMPLEDATE as a vector called mc_dates\n\n\n\n\nMake a salamander subset\n\nCreate a subset that only contains observations for Pacific Giant Salamanders (species Dicamptodon tenebrosus, stored in species as DITE). Store the subset as mc_salamanders. Hint: see dplyr::filter()!\n\n\n\nMake a scatterplot of salamander length x weight\n\nCreate a scatterplot of length1 (snout-vent length in millimeters) versus weight (grams) for all salamanders in the subset you created above, mc_salamanders. Update axis labels, title, subtitle, and add a caption with the data source. Customize point color and size, possibly opacity, and theme.\nExport your scatterplot as salamander_size.png to your figs folder.\n\n\n\nMake a cutthroat plot\n\nSimilar to above, make a subset called mc_trout that only contains observations for cutthroat trout (species “ONCL”)\nCreate a scatterplot of length1 by weight for all trout in the dataset\nCustomize so that the point color depends on reach\nCustomize your color scheme (e.g. scale_color_manual())\nFacet your plot by creek reach (hint: facet_wrap(~...))\nUpdate graph axis labels and title\nExport your graph as cutthroat_size.png to the figs folder\n\n\n\nStage, commit, pull, push\n\nMake sure your changes are safely stored by pushing to GitHub\nClose your project locally\nReopen your project locally\nReopen your .qmd files for the activities you did today.\nRender. Does it work? Done."
  },
  {
    "objectID": "course-materials/eod-practice/eod-day2.html#end-day-2-activities",
    "href": "course-materials/eod-practice/eod-day2.html#end-day-2-activities",
    "title": "Day 2 Activities",
    "section": "End Day 2 activities",
    "text": "End Day 2 activities"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html",
    "href": "course-materials/eod-practice/eod-day3.html",
    "title": "Day 3 Activities",
    "section": "",
    "text": "Create a repo on GitHub named eds212-day3-activities\nClone to create a version-controlled R Project\nCreate some subfolder infrastructure (docs, data)"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html#part-0.-setup",
    "href": "course-materials/eod-practice/eod-day3.html#part-0.-setup",
    "title": "Day 3 Activities",
    "section": "",
    "text": "Create a repo on GitHub named eds212-day3-activities\nClone to create a version-controlled R Project\nCreate some subfolder infrastructure (docs, data)"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html#part-1.-conditional-statements-for-loops",
    "href": "course-materials/eod-practice/eod-day3.html#part-1.-conditional-statements-for-loops",
    "title": "Day 3 Activities",
    "section": "Part 1. Conditional statements & for loops",
    "text": "Part 1. Conditional statements & for loops\nCreate a new Quarto document in your docs folder, saved as conditionals_loops.qmd. Complete all tasks for Part 1 in this .qmd.\nComplete each of the following in a separate code chunk.\n\nConditional statements\n\nTask 1\nCreate an object called pm2_5 with a value of 48 (representing Particulate Matter 2.5, an indicator for air quality, in \\(\\frac{\\mu g}{m^3}\\) (see more about PM2.5 here).\nWrite an if - else if - else statement that returns “Low to moderate risk” if pm2_5 (for Particulate Matter 2.5) is less than 100, “Unhealthy for sensitive groups” if PM 2.5 is 100 &lt;= pm2_5 &lt; 150, and “Health risk present” if PM 2.5 is &gt;= 150.\nTest by changing the value of your pm2_5 object and re-running your statement to check.\n\n\nTask 2\nStore the string “blue whale” as an object called species. Write an if statement that returns “You found a whale!” if the string “whale” is detected in species, otherwise return nothing. Test by changing the species string & re-running to see output.\n\n\n\nTask 3\nStore the base price of a burrito as base_burrito with a value of 6.50. Store main_ingredient with a starting string of “veggie.” Write a statement that will return the price of a burrito based on what a user specifies as “main_ingredient” (either “veggie”, “chicken” or “steak”) given the following:\n\nA veggie burrito is the cost of a base burrito\nA chicken burrito costs 3.00 more than a base burrito\nA steak burrito costs 3.25 more than a base burrito\n\n\n\n\nFor loops\nComplete each of the following in a separate code chunk.\n\nTask 4\nCreate a new vector called fish that contains the values 8, 10, 12, 23 representing counts of different fish types in a fish tank (goldfish, tetras, guppies, and mollies, respectively). Write a for loop that iterates through fish, and returns what proportion of total fish in the tank are that species. Assume that these counts represent all fish in the tank.\n\n\nTask 5\nThere is an existing vector in R called month.name that contains all month names (just ry running month.name in the Console to check it out). Write a for loop that iterates over all months in month.name and prints “January is month 1,” “February is month 2”, etc.\nHint: you can index values in the month.name vector just like you would any other vector (e.g., try running month.name[5])."
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html#part-2.-real-data",
    "href": "course-materials/eod-practice/eod-day3.html#part-2.-real-data",
    "title": "Day 3 Activities",
    "section": "Part 2. Real data",
    "text": "Part 2. Real data\nYou will complete Part 3 in a separate .qmd.\nExplore this data package from EDI, which contains a “Data file describing the biogeochemistry of samples collected at various sites near Toolik Lake, North Slope of Alaska”. Familiarize yourself with the metadata (particularly, View full metadata &gt; expand ‘Data entities’ to learn more about the variables in the dataset).\nCitation: Kling, G. 2016. Biogeochemistry data set for soil waters, streams, and lakes near Toolik on the North Slope of Alaska, 2011. ver 5. Environmental Data Initiative. https://doi.org/10.6073/pasta/362c8eeac5cad9a45288cf1b0d617ba7\n\nDownload the CSV containing the Toolik biogeochemistry data\nTake a look at it - how are missing values stored? Keep that in mind.\nDrop the CSV into your data folder of your project\nCreate a new Quarto document, save in docs as toolik_chem.qmd\nAttach the tidyverse, here, and janitor packages in your setup code chunk\nRead in the data as toolik_biochem. Remember, you’ll want to specify here how NA values are stored. Pipe directly into janitor::clean_names() following your import code to get all column names into lower snake case.\nCreate a subset of the data that contains only observations from the “Toolik Inlet” site, and that only contains the variables (columns) for pH, dissolved organic carbon (DOC), and total dissolved nitrogen (TDN) (hint: see dplyr::select()). Store this subset as inlet_biochem. Make sure to look at the subset you’ve created.\nFind the mean value of each column in inlet_biochem 3 different ways:\n\n\nWrite a for loop from scratch to calculate the mean for each\nUse one other method (e.g. apply, across, or purrr::map_df) to find the mean for each column.\n\n\nSave, stage, commit, pull, push!"
  },
  {
    "objectID": "course-materials/eod-practice/eod-day3.html#end-day-3-activities",
    "href": "course-materials/eod-practice/eod-day3.html#end-day-3-activities",
    "title": "Day 3 Activities",
    "section": "END Day 3 activities",
    "text": "END Day 3 activities"
  }
]